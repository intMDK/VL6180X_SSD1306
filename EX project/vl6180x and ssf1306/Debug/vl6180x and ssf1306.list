
vl6180x and ssf1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f2c  08004f2c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f2c  08004f2c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000078  08004fac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08004fac  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a215  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed4  00000000  00000000  0002a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026955  00000000  00000000  0002d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9c4  00000000  00000000  00053df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e616c  00000000  00000000  000617b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  00147978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004128 	.word	0x08004128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004128 	.word	0x08004128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <main>:

uint16_t als_result;
uint8_t tof_result;
char str[128];
int main(void)
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 f927 	bl	8000ca2 <HAL_Init>
  /* Configure the system clock */
  rcc_config();
 8000a54:	f002 f95e 	bl	8002d14 <rcc_config>

  /* Initialize all configured peripherals */
  gpio_config();
 8000a58:	f002 f92c 	bl	8002cb4 <gpio_config>

  vl6180x_init();
 8000a5c:	f002 feab 	bl	80037b6 <vl6180x_init>

  ssd1306_init();
 8000a60:	f002 fa90 	bl	8002f84 <ssd1306_init>

  while (1)
  {

	  als_result = vl6180x_ALS_read();
 8000a64:	f002 fd44 	bl	80034f0 <vl6180x_ALS_read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <main+0xbc>)
 8000a6e:	801a      	strh	r2, [r3, #0]
	  tof_result = (0.5*tof_result) + (0.5 * (vl6180x_TOF_read()));
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <main+0xc0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd4d 	bl	8000514 <__aeabi_i2d>
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <main+0xc4>)
 8000a80:	f7ff fdb2 	bl	80005e8 <__aeabi_dmul>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	4614      	mov	r4, r2
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	f002 fda1 	bl	80035d2 <vl6180x_TOF_read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fd3e 	bl	8000514 <__aeabi_i2d>
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <main+0xc4>)
 8000a9e:	f7ff fda3 	bl	80005e8 <__aeabi_dmul>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	4629      	mov	r1, r5
 8000aaa:	f7ff fbe7 	bl	800027c <__adddf3>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f7ff ffa9 	bl	8000a0c <__aeabi_d2uiz>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <main+0xc0>)
 8000ac0:	701a      	strb	r2, [r3, #0]


	  sprintf(str,"Range:%d ",tof_result);
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <main+0xc0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4912      	ldr	r1, [pc, #72]	; (8000b14 <main+0xc8>)
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <main+0xcc>)
 8000acc:	f002 febe 	bl	800384c <siprintf>
	  gotoxy(0,0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f002 faf8 	bl	80030c8 <gotoxy>
	  SSD1306_Puts(str,&Font_11x18, SSD1306_COLOR_WHITE);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4910      	ldr	r1, [pc, #64]	; (8000b1c <main+0xd0>)
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <main+0xcc>)
 8000ade:	f002 fbf3 	bl	80032c8 <SSD1306_Puts>
	  sprintf(str,"ALS  :%d    ",als_result);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <main+0xbc>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	490d      	ldr	r1, [pc, #52]	; (8000b20 <main+0xd4>)
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <main+0xcc>)
 8000aec:	f002 feae 	bl	800384c <siprintf>
  	  gotoxy(0, 20);
 8000af0:	2114      	movs	r1, #20
 8000af2:	2000      	movs	r0, #0
 8000af4:	f002 fae8 	bl	80030c8 <gotoxy>
  	  SSD1306_Puts(str,&Font_11x18, SSD1306_COLOR_WHITE);
 8000af8:	2201      	movs	r2, #1
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <main+0xd0>)
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <main+0xcc>)
 8000afe:	f002 fbe3 	bl	80032c8 <SSD1306_Puts>

  	  SSD1306_UpdateScreen();
 8000b02:	f002 faf9 	bl	80030f8 <SSD1306_UpdateScreen>
	  als_result = vl6180x_ALS_read();
 8000b06:	e7ad      	b.n	8000a64 <main+0x18>
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000096 	.word	0x20000096
 8000b10:	3fe00000 	.word	0x3fe00000
 8000b14:	08004140 	.word	0x08004140
 8000b18:	20000098 	.word	0x20000098
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	0800414c 	.word	0x0800414c

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6613      	str	r3, [r2, #96]	; 0x60
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8c8 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f002 fdfa 	bl	80037e8 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20018000 	.word	0x20018000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000118 	.word	0x20000118
 8000c28:	20000650 	.word	0x20000650

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f002 fdb9 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fee3 	bl	8000a4c <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c94:	08004f34 	.word	0x08004f34
  ldr r2, =_sbss
 8000c98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c9c:	20000650 	.word	0x20000650

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f943 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff ff2e 	bl	8000b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_InitTick+0x70>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f941 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f919 	bl	8000f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	2000011c 	.word	0x2000011c

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000011c 	.word	0x2000011c

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff47 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff5c 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffb0 	bl	8000ef4 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e17f      	b.n	80012b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8171 	beq.w	80012aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x40>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 0201 	and.w	r2, r3, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d118      	bne.n	8001080 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80ac 	beq.w	80012aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <HAL_GPIO_Init+0x330>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	4a5e      	ldr	r2, [pc, #376]	; (80012d0 <HAL_GPIO_Init+0x330>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6613      	str	r3, [r2, #96]	; 0x60
 800115e:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <HAL_GPIO_Init+0x330>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116a:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <HAL_GPIO_Init+0x334>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x242>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x338>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x23e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <HAL_GPIO_Init+0x33c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x23a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <HAL_GPIO_Init+0x340>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x236>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <HAL_GPIO_Init+0x344>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x232>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4b      	ldr	r2, [pc, #300]	; (80012e8 <HAL_GPIO_Init+0x348>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x22e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x34c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x22a>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011ca:	2307      	movs	r3, #7
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011e2:	2300      	movs	r3, #0
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f4:	4937      	ldr	r1, [pc, #220]	; (80012d4 <HAL_GPIO_Init+0x334>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_GPIO_Init+0x350>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x350>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x350>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_GPIO_Init+0x350>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x350>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x350>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x350>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_GPIO_Init+0x350>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f47f ae78 	bne.w	8000fb0 <HAL_GPIO_Init+0x10>
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	48001000 	.word	0x48001000
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001800 	.word	0x48001800
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e081      	b.n	800143a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f879 	bl	8001442 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e006      	b.n	80013ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d104      	bne.n	80013be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69d9      	ldr	r1, [r3, #28]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2220      	movs	r2, #32
 8001426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	461a      	mov	r2, r3
 8001464:	460b      	mov	r3, r1
 8001466:	817b      	strh	r3, [r7, #10]
 8001468:	4613      	mov	r3, r2
 800146a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	f040 80da 	bne.w	800162e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Master_Transmit+0x30>
 8001484:	2302      	movs	r3, #2
 8001486:	e0d3      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001490:	f7ff fc70 	bl	8000d74 <HAL_GetTick>
 8001494:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2319      	movs	r3, #25
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 faed 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0be      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2221      	movs	r2, #33	; 0x21
 80014b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	893a      	ldrh	r2, [r7, #8]
 80014d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2bff      	cmp	r3, #255	; 0xff
 80014e2:	d90e      	bls.n	8001502 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22ff      	movs	r2, #255	; 0xff
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	8979      	ldrh	r1, [r7, #10]
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 fce4 	bl	8001ec8 <I2C_TransferConfig>
 8001500:	e06c      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	b2da      	uxtb	r2, r3
 8001512:	8979      	ldrh	r1, [r7, #10]
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <HAL_I2C_Master_Transmit+0x1e0>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 fcd3 	bl	8001ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001522:	e05b      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 faea 	bl	8001b02 <I2C_WaitOnTXISFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e07b      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d034      	beq.n	80015dc <HAL_I2C_Master_Transmit+0x184>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fa7c 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04d      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d90e      	bls.n	80015bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	22ff      	movs	r2, #255	; 0xff
 80015a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fc87 	bl	8001ec8 <I2C_TransferConfig>
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	8979      	ldrh	r1, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fc76 	bl	8001ec8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d19e      	bne.n	8001524 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fac9 	bl	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e01a      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_I2C_Master_Transmit+0x1e4>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	80002000 	.word	0x80002000
 800163c:	fe00e800 	.word	0xfe00e800

08001640 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 80db 	bne.w	8001818 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_I2C_Master_Receive+0x30>
 800166c:	2302      	movs	r3, #2
 800166e:	e0d4      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001678:	f7ff fb7c 	bl	8000d74 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2319      	movs	r3, #25
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f9f9 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0bf      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2222      	movs	r2, #34	; 0x22
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2210      	movs	r2, #16
 80016a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d90e      	bls.n	80016ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	4b52      	ldr	r3, [pc, #328]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fbf0 	bl	8001ec8 <I2C_TransferConfig>
 80016e8:	e06d      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	8979      	ldrh	r1, [r7, #10]
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_I2C_Master_Receive+0x1e4>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fbdf 	bl	8001ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800170a:	e05c      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fa73 	bl	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e07c      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d034      	beq.n	80017c6 <HAL_I2C_Master_Receive+0x186>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d130      	bne.n	80017c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f987 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e04d      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d90e      	bls.n	80017a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fb92 	bl	8001ec8 <I2C_TransferConfig>
 80017a4:	e00f      	b.n	80017c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fb81 	bl	8001ec8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d19d      	bne.n	800170c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f9d4 	bl	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_I2C_Master_Receive+0x1e8>)
 80017f8:	400b      	ands	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	80002400 	.word	0x80002400
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	f040 80f1 	bne.w	8001a30 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185c:	d101      	bne.n	8001862 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_IsDeviceReady+0x44>
 800186c:	2302      	movs	r3, #2
 800186e:	e0e0      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_I2C_IsDeviceReady+0x72>
 800188e:	897b      	ldrh	r3, [r7, #10]
 8001890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189c:	e004      	b.n	80018a8 <HAL_I2C_IsDeviceReady+0x7c>
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa61 	bl	8000d74 <HAL_GetTick>
 80018b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b20      	cmp	r3, #32
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018e0:	e034      	b.n	800194c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d01a      	beq.n	8001920 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ea:	f7ff fa43 	bl	8000d74 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d302      	bcc.n	8001900 <HAL_I2C_IsDeviceReady+0xd4>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e088      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b20      	cmp	r3, #32
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b10      	cmp	r3, #16
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_I2C_IsDeviceReady+0x12c>
 8001952:	7fbb      	ldrb	r3, [r7, #30]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0c4      	beq.n	80018e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d01a      	beq.n	800199c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2120      	movs	r1, #32
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f886 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e058      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e04a      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	2120      	movs	r1, #32
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f86b 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03d      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2210      	movs	r2, #16
 80019bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d118      	bne.n	8001a00 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2120      	movs	r1, #32
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f84a 	bl	8001a82 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e01c      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f63f af3b 	bhi.w	8001886 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d103      	bne.n	8001a58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d007      	beq.n	8001a76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	619a      	str	r2, [r3, #24]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a92:	e022      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d01e      	beq.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9c:	f7ff f96a 	bl	8000d74 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d113      	bne.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f043 0220 	orr.w	r2, r3, #32
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d0cd      	beq.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b0e:	e02c      	b.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f8eb 	bl	8001cf0 <I2C_IsErrorOccurred>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e02a      	b.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2a:	d01e      	beq.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	f7ff f922 	bl	8000d74 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d302      	bcc.n	8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d113      	bne.n	8001b6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e007      	b.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d1cb      	bne.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8e:	e028      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f8ab 	bl	8001cf0 <I2C_IsErrorOccurred>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e026      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f8e6 	bl	8000d74 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d1cf      	bne.n	8001b90 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c08:	e064      	b.n	8001cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f86e 	bl	8001cf0 <I2C_IsErrorOccurred>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e062      	b.n	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d138      	bne.n	8001c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d105      	bne.n	8001c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e04e      	b.n	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d107      	bne.n	8001c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
 8001c62:	e002      	b.n	8001c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e022      	b.n	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff f869 	bl	8000d74 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d193      	bne.n	8001c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d075      	beq.n	8001e08 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d24:	e056      	b.n	8001dd4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d052      	beq.n	8001dd4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d2e:	f7ff f821 	bl	8000d74 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d302      	bcc.n	8001d44 <I2C_IsErrorOccurred+0x54>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d147      	bne.n	8001dd4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d66:	d12e      	bne.n	8001dc6 <I2C_IsErrorOccurred+0xd6>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d6e:	d02a      	beq.n	8001dc6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d027      	beq.n	8001dc6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d86:	f7fe fff5 	bl	8000d74 <HAL_GetTick>
 8001d8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d8c:	e01b      	b.n	8001dc6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d8e:	f7fe fff1 	bl	8000d74 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b19      	cmp	r3, #25
 8001d9a:	d914      	bls.n	8001dc6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d1dc      	bne.n	8001d8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d003      	beq.n	8001dea <I2C_IsErrorOccurred+0xfa>
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d09d      	beq.n	8001d26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01c      	beq.n	8001eb8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff fddb 	bl	8001a3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <I2C_IsErrorOccurred+0x1d4>)
 8001e90:	400b      	ands	r3, r1
 8001e92:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	fe00e800 	.word	0xfe00e800

08001ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ee0:	7a7b      	ldrb	r3, [r7, #9]
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ef6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	0d5b      	lsrs	r3, r3, #21
 8001f02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <I2C_TransferConfig+0x60>)
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	ea02 0103 	and.w	r1, r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	03ff63ff 	.word	0x03ff63ff

08001f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d138      	bne.n	8001fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e032      	b.n	8001fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	; 0x24
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d139      	bne.n	800204c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e033      	b.n	800204e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2224      	movs	r2, #36	; 0x24
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002014:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_PWREx_GetVoltageRange+0x18>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000

08002078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002086:	d130      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002094:	d038      	beq.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2232      	movs	r2, #50	; 0x32
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	3301      	adds	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020bc:	e002      	b.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d102      	bne.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f2      	bne.n	80020be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e4:	d110      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e00f      	b.n	800210a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d007      	beq.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002100:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40007000 	.word	0x40007000
 800211c:	20000000 	.word	0x20000000
 8002120:	431bde83 	.word	0x431bde83

08002124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e3ca      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	4b97      	ldr	r3, [pc, #604]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002140:	4b94      	ldr	r3, [pc, #592]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80e4 	beq.w	8002320 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <HAL_RCC_OscConfig+0x4a>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	f040 808b 	bne.w	800227c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b01      	cmp	r3, #1
 800216a:	f040 8087 	bne.w	800227c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x62>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e3a2      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_RCC_OscConfig+0x7c>
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219e:	e005      	b.n	80021ac <HAL_RCC_OscConfig+0x88>
 80021a0:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d223      	bcs.n	80021f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fd1d 	bl	8002bf4 <RCC_SetFlashLatencyFromMSIRange>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e383      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c4:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b70      	ldr	r3, [pc, #448]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	496d      	ldr	r1, [pc, #436]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	4968      	ldr	r1, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	e025      	b.n	8002244 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4960      	ldr	r1, [pc, #384]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	495b      	ldr	r1, [pc, #364]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fcdd 	bl	8002bf4 <RCC_SetFlashLatencyFromMSIRange>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e343      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002244:	f000 fc4a 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	4950      	ldr	r1, [pc, #320]	; (8002398 <HAL_RCC_OscConfig+0x274>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_RCC_OscConfig+0x278>)
 8002262:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002264:	4b4e      	ldr	r3, [pc, #312]	; (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd33 	bl	8000cd4 <HAL_InitTick>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d052      	beq.n	800231e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	e327      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d032      	beq.n	80022ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a42      	ldr	r2, [pc, #264]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002290:	f7fe fd70 	bl	8000d74 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002298:	f7fe fd6c 	bl	8000d74 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e310      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a36      	ldr	r2, [pc, #216]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4931      	ldr	r1, [pc, #196]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	492c      	ldr	r1, [pc, #176]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e01a      	b.n	8002320 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fd3d 	bl	8000d74 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fe:	f7fe fd39 	bl	8000d74 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e2dd      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x1da>
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d074      	beq.n	8002416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x21a>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d10e      	bne.n	8002356 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d10b      	bne.n	8002356 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d064      	beq.n	8002414 <HAL_RCC_OscConfig+0x2f0>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d160      	bne.n	8002414 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e2ba      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x24a>
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e026      	b.n	80023bc <HAL_RCC_OscConfig+0x298>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_OscConfig+0x280>
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800237e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a02      	ldr	r2, [pc, #8]	; (8002394 <HAL_RCC_OscConfig+0x270>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x298>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	0800415c 	.word	0x0800415c
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004
 80023a4:	4ba0      	ldr	r3, [pc, #640]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a9f      	ldr	r2, [pc, #636]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b9d      	ldr	r3, [pc, #628]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a9c      	ldr	r2, [pc, #624]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fcd6 	bl	8000d74 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fcd2 	bl	8000d74 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e276      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023de:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x2a8>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fcc2 	bl	8000d74 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe fcbe 	bl	8000d74 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e262      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2d0>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d060      	beq.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d005      	beq.n	8002434 <HAL_RCC_OscConfig+0x310>
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d119      	bne.n	8002462 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d116      	bne.n	8002462 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002434:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_OscConfig+0x328>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e23f      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	4973      	ldr	r1, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	e040      	b.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d023      	beq.n	80024b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246a:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fc7d 	bl	8000d74 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247e:	f7fe fc79 	bl	8000d74 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e21d      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b62      	ldr	r3, [pc, #392]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	495f      	ldr	r1, [pc, #380]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e018      	b.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80024b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fc59 	bl	8000d74 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe fc55 	bl	8000d74 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1f9      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03c      	beq.n	800256a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01c      	beq.n	8002532 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fc34 	bl	8000d74 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe fc30 	bl	8000d74 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1d4      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ef      	beq.n	8002510 <HAL_RCC_OscConfig+0x3ec>
 8002530:	e01b      	b.n	800256a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002538:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe fc17 	bl	8000d74 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254a:	f7fe fc13 	bl	8000d74 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e1b7      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ef      	bne.n	800254a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80a6 	beq.w	80026c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	; 0x58
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_RCC_OscConfig+0x508>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d118      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_OscConfig+0x508>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x508>)
 80025b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025bc:	f7fe fbda 	bl	8000d74 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fbd6 	bl	8000d74 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e17a      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCC_OscConfig+0x508>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d8>
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025fa:	e029      	b.n	8002650 <HAL_RCC_OscConfig+0x52c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d115      	bne.n	8002630 <HAL_RCC_OscConfig+0x50c>
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a03      	ldr	r2, [pc, #12]	; (8002628 <HAL_RCC_OscConfig+0x504>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x52c>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	4b9c      	ldr	r3, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a9b      	ldr	r2, [pc, #620]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002640:	4b98      	ldr	r3, [pc, #608]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a97      	ldr	r2, [pc, #604]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d016      	beq.n	8002686 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fb8c 	bl	8000d74 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fb88 	bl	8000d74 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e12a      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002676:	4b8b      	ldr	r3, [pc, #556]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ed      	beq.n	8002660 <HAL_RCC_OscConfig+0x53c>
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fb75 	bl	8000d74 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fb71 	bl	8000d74 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e113      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a4:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ed      	bne.n	800268e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b7a      	ldr	r3, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	4a79      	ldr	r2, [pc, #484]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80026be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80fe 	beq.w	80028ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	f040 80d0 	bne.w	8002878 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026d8:	4b72      	ldr	r3, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d130      	bne.n	800274e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	3b01      	subs	r3, #1
 80026f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d127      	bne.n	800274e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d11f      	bne.n	800274e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002718:	2a07      	cmp	r2, #7
 800271a:	bf14      	ite	ne
 800271c:	2201      	movne	r2, #1
 800271e:	2200      	moveq	r2, #0
 8002720:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002722:	4293      	cmp	r3, r2
 8002724:	d113      	bne.n	800274e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d109      	bne.n	800274e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	3b01      	subs	r3, #1
 8002748:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d06e      	beq.n	800282c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d069      	beq.n	8002828 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002760:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0ad      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002770:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800277c:	f7fe fafa 	bl	8000d74 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe faf6 	bl	8000d74 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e09a      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a2:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x784>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b2:	3a01      	subs	r2, #1
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027bc:	0212      	lsls	r2, r2, #8
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027c4:	0852      	lsrs	r2, r2, #1
 80027c6:	3a01      	subs	r2, #1
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027d0:	0852      	lsrs	r2, r2, #1
 80027d2:	3a01      	subs	r2, #1
 80027d4:	0652      	lsls	r2, r2, #25
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027dc:	0912      	lsrs	r2, r2, #4
 80027de:	0452      	lsls	r2, r2, #17
 80027e0:	430a      	orrs	r2, r1
 80027e2:	4930      	ldr	r1, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002800:	f7fe fab8 	bl	8000d74 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fab4 	bl	8000d74 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e058      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002826:	e050      	b.n	80028ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04f      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d148      	bne.n	80028ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002850:	f7fe fa90 	bl	8000d74 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fa8c 	bl	8000d74 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e030      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x734>
 8002876:	e028      	b.n	80028ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d023      	beq.n	80028c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <HAL_RCC_OscConfig+0x780>)
 8002884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe fa73 	bl	8000d74 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	e00c      	b.n	80028ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fa6f 	bl	8000d74 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d905      	bls.n	80028ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x7b0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ec      	bne.n	8002892 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x7b0>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4905      	ldr	r1, [pc, #20]	; (80028d4 <HAL_RCC_OscConfig+0x7b0>)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_RCC_OscConfig+0x7b4>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
 80028c4:	e001      	b.n	80028ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	feeefffc 	.word	0xfeeefffc

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0e7      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b75      	ldr	r3, [pc, #468]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b72      	ldr	r3, [pc, #456]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4970      	ldr	r1, [pc, #448]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cf      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002938:	429a      	cmp	r2, r3
 800293a:	d908      	bls.n	800294e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4960      	ldr	r1, [pc, #384]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d04c      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d121      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0a6      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b54      	ldr	r3, [pc, #336]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e09a      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e08e      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e086      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4943      	ldr	r1, [pc, #268]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe f9d6 	bl	8000d74 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe f9d2 	bl	8000d74 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e06e      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d208      	bcs.n	8002a22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	492b      	ldr	r1, [pc, #172]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d210      	bcs.n	8002a52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 0207 	bic.w	r2, r3, #7
 8002a38:	4923      	ldr	r1, [pc, #140]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e036      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4918      	ldr	r1, [pc, #96]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4910      	ldr	r1, [pc, #64]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a90:	f000 f824 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe f90d 	bl	8000cd4 <HAL_InitTick>
 8002aba:	4603      	mov	r3, r0
 8002abc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002abe:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	0800415c 	.word	0x0800415c
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x34>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d121      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d11e      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	e005      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b38:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_GetSysClockFreq+0x110>)
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	e004      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d134      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d003      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xac>
 8002b80:	e005      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_GetSysClockFreq+0x110>)
 8002b84:	617b      	str	r3, [r7, #20]
      break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8a:	617b      	str	r3, [r7, #20]
      break;
 8002b8c:	e002      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	617b      	str	r3, [r7, #20]
      break;
 8002b92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	fb03 f202 	mul.w	r2, r3, r2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	0e5b      	lsrs	r3, r3, #25
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	0800416c 	.word	0x0800416c
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	007a1200 	.word	0x007a1200

08002bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c0c:	f7ff fa26 	bl	800205c <HAL_PWREx_GetVoltageRange>
 8002c10:	6178      	str	r0, [r7, #20]
 8002c12:	e014      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c2c:	f7ff fa16 	bl	800205c <HAL_PWREx_GetVoltageRange>
 8002c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d10b      	bne.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d919      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c50:	d902      	bls.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c52:	2302      	movs	r3, #2
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e013      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c58:	2301      	movs	r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e010      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d902      	bls.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c64:	2303      	movs	r3, #3
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e00a      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d102      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e004      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d101      	bne.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 0207 	bic.w	r2, r3, #7
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <gpio_config>:
#include "gpio.h"

GPIO_InitTypeDef gpioInit = {0};
void gpio_config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <gpio_config+0x58>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <gpio_config+0x58>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <gpio_config+0x58>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
	gpioInit.Pin = GPIO_PIN_8 ;
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <gpio_config+0x5c>)
 8002cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd8:	601a      	str	r2, [r3, #0]
	gpioInit.Mode = GPIO_MODE_OUTPUT_PP;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <gpio_config+0x5c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	605a      	str	r2, [r3, #4]
	gpioInit.Pull = GPIO_PULLUP;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <gpio_config+0x5c>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	609a      	str	r2, [r3, #8]
	gpioInit.Speed = GPIO_SPEED_LOW;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <gpio_config+0x5c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &gpioInit);
 8002cec:	4908      	ldr	r1, [pc, #32]	; (8002d10 <gpio_config+0x5c>)
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf2:	f7fe f955 	bl	8000fa0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d00:	f7fe faf8 	bl	80012f4 <HAL_GPIO_WritePin>

}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	20000120 	.word	0x20000120

08002d14 <rcc_config>:
#include "rcc.h"

RCC_OscInitTypeDef rccOscInit = {0};
RCC_ClkInitTypeDef rccClkInit = {0};
void rcc_config(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d1c:	f7ff f9ac 	bl	8002078 <HAL_PWREx_ControlVoltageScaling>

	rccOscInit.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <rcc_config+0x80>)
 8002d22:	2210      	movs	r2, #16
 8002d24:	601a      	str	r2, [r3, #0]
	rccOscInit.MSIState = RCC_MSI_ON;
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <rcc_config+0x80>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	619a      	str	r2, [r3, #24]
	rccOscInit.MSICalibrationValue =0;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <rcc_config+0x80>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
	rccOscInit.MSIClockRange = RCC_MSIRANGE_6;
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <rcc_config+0x80>)
 8002d34:	2260      	movs	r2, #96	; 0x60
 8002d36:	621a      	str	r2, [r3, #32]
	rccOscInit.PLL.PLLState = RCC_PLL_ON;
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <rcc_config+0x80>)
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
	rccOscInit.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <rcc_config+0x80>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
	rccOscInit.PLL.PLLM = 1;
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <rcc_config+0x80>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
	rccOscInit.PLL.PLLN = 40;
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <rcc_config+0x80>)
 8002d4c:	2228      	movs	r2, #40	; 0x28
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
	rccOscInit.PLL.PLLP = RCC_PLLP_DIV7;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <rcc_config+0x80>)
 8002d52:	2207      	movs	r2, #7
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
	rccOscInit.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <rcc_config+0x80>)
 8002d58:	2202      	movs	r2, #2
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	rccOscInit.PLL.PLLR = RCC_PLLR_DIV2;
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <rcc_config+0x80>)
 8002d5e:	2202      	movs	r2, #2
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_RCC_OscConfig(&rccOscInit);
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <rcc_config+0x80>)
 8002d64:	f7ff f9de 	bl	8002124 <HAL_RCC_OscConfig>

	rccClkInit.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <rcc_config+0x84>)
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	601a      	str	r2, [r3, #0]
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	rccClkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <rcc_config+0x84>)
 8002d70:	2203      	movs	r2, #3
 8002d72:	605a      	str	r2, [r3, #4]
	rccClkInit.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <rcc_config+0x84>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
	rccClkInit.APB1CLKDivider = RCC_SYSCLK_DIV1;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <rcc_config+0x84>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	60da      	str	r2, [r3, #12]
	rccClkInit.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <rcc_config+0x84>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
	HAL_RCC_ClockConfig(&rccClkInit, FLASH_LATENCY_4);
 8002d86:	2104      	movs	r1, #4
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <rcc_config+0x84>)
 8002d8a:	f7ff fda7 	bl	80028dc <HAL_RCC_ClockConfig>
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000134 	.word	0x20000134
 8002d98:	20000178 	.word	0x20000178

08002d9c <i2c_I2C2_GPIO_config>:




void i2c_I2C2_GPIO_config(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitstruct = {0};
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <i2c_I2C2_GPIO_config+0x54>)
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <i2c_I2C2_GPIO_config+0x54>)
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <i2c_I2C2_GPIO_config+0x54>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
	gpioInitstruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dcc:	607b      	str	r3, [r7, #4]
	gpioInitstruct.Mode = GPIO_MODE_AF_OD;
 8002dce:	2312      	movs	r3, #18
 8002dd0:	60bb      	str	r3, [r7, #8]
	gpioInitstruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
	gpioInitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	613b      	str	r3, [r7, #16]
	gpioInitstruct.Alternate = GPIO_AF4_I2C2;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpioInitstruct);
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <i2c_I2C2_GPIO_config+0x58>)
 8002de4:	f7fe f8dc 	bl	8000fa0 <HAL_GPIO_Init>
}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <i2c_I2C2_config>:
void i2c_I2C2_config(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C2_CLK_ENABLE();
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <i2c_I2C2_config+0x74>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <i2c_I2C2_config+0x74>)
 8002e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <i2c_I2C2_config+0x74>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
	hi2c2.Instance = I2C2;
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <i2c_I2C2_config+0x7c>)
 8002e1a:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00702991;
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <i2c_I2C2_config+0x80>)
 8002e20:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c2);
 8002e4c:	4808      	ldr	r0, [pc, #32]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e4e:	f7fe fa69 	bl	8001324 <HAL_I2C_Init>

	/** Configure Analog filter
		  */
	 HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 8002e52:	2100      	movs	r1, #0
 8002e54:	4806      	ldr	r0, [pc, #24]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e56:	f7ff f869 	bl	8001f2c <HAL_I2CEx_ConfigAnalogFilter>

	  /** Configure Digital filter
	  */
	  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <i2c_I2C2_config+0x78>)
 8002e5e:	f7ff f8b0 	bl	8001fc2 <HAL_I2CEx_ConfigDigitalFilter>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	2000018c 	.word	0x2000018c
 8002e74:	40005800 	.word	0x40005800
 8002e78:	00702991 	.word	0x00702991

08002e7c <SSD1306_setting>:
	uint16_t Y;
} SSD1306_t;
SSD1306_t SSD1306;

void SSD1306_setting(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	// Set Memory Addressing Mode to Horizontal
	dcommands[0] = 0;
 8002e80:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <SSD1306_setting+0x100>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
	scommands[0] = 0;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <SSD1306_setting+0x104>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]

	dcommands[1] = Set_Memory_Addressing;
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <SSD1306_setting+0x100>)
 8002e8e:	2220      	movs	r2, #32
 8002e90:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0x10;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <SSD1306_setting+0x100>)
 8002e94:	2210      	movs	r2, #16
 8002e96:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002e98:	4838      	ldr	r0, [pc, #224]	; (8002f7c <SSD1306_setting+0x100>)
 8002e9a:	f000 fa31 	bl	8003300 <SSD1306_SendCommand>

	//Set Page Start Address for Page Addressing Mode,0-7
	scommands[1] = Set_Page_Start_Address;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <SSD1306_setting+0x104>)
 8002ea0:	22b0      	movs	r2, #176	; 0xb0
 8002ea2:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002ea4:	4836      	ldr	r0, [pc, #216]	; (8002f80 <SSD1306_setting+0x104>)
 8002ea6:	f000 fa2b 	bl	8003300 <SSD1306_SendCommand>

	//---set low column address
	scommands[1] = Set_Lcolumn_Saddress;
 8002eaa:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <SSD1306_setting+0x104>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002eb0:	4833      	ldr	r0, [pc, #204]	; (8002f80 <SSD1306_setting+0x104>)
 8002eb2:	f000 fa25 	bl	8003300 <SSD1306_SendCommand>

	//---set high column address
	scommands[1] = Set_Hcolumn_Saddress;
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <SSD1306_setting+0x104>)
 8002eb8:	2210      	movs	r2, #16
 8002eba:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002ebc:	4830      	ldr	r0, [pc, #192]	; (8002f80 <SSD1306_setting+0x104>)
 8002ebe:	f000 fa1f 	bl	8003300 <SSD1306_SendCommand>

	//Set_Multiplex_Ratio to 64

	dcommands[1] = Set_Multiplex_Ratio;
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <SSD1306_setting+0x100>)
 8002ec4:	22a8      	movs	r2, #168	; 0xa8
 8002ec6:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0x3F;
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <SSD1306_setting+0x100>)
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002ece:	482b      	ldr	r0, [pc, #172]	; (8002f7c <SSD1306_setting+0x100>)
 8002ed0:	f000 fa16 	bl	8003300 <SSD1306_SendCommand>



	//Set_Display_Offset
	dcommands[1] = Set_Display_Offset;
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <SSD1306_setting+0x100>)
 8002ed6:	22d3      	movs	r2, #211	; 0xd3
 8002ed8:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0x00;
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <SSD1306_setting+0x100>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002ee0:	4826      	ldr	r0, [pc, #152]	; (8002f7c <SSD1306_setting+0x100>)
 8002ee2:	f000 fa0d 	bl	8003300 <SSD1306_SendCommand>

	//Set Display Start Line
	scommands[1] = Set_Display_Start_Line_0;
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <SSD1306_setting+0x104>)
 8002ee8:	2240      	movs	r2, #64	; 0x40
 8002eea:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002eec:	4824      	ldr	r0, [pc, #144]	; (8002f80 <SSD1306_setting+0x104>)
 8002eee:	f000 fa07 	bl	8003300 <SSD1306_SendCommand>

	//Set Segment Re-map
	scommands[1] = Set_Segment_Remap_RtoL;
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <SSD1306_setting+0x104>)
 8002ef4:	22a1      	movs	r2, #161	; 0xa1
 8002ef6:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002ef8:	4821      	ldr	r0, [pc, #132]	; (8002f80 <SSD1306_setting+0x104>)
 8002efa:	f000 fa01 	bl	8003300 <SSD1306_SendCommand>

	//Set COM Output Scan Direction Bottom to Top
	scommands[1] = Set_COM_Output_Scan_Direction_BtoT;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <SSD1306_setting+0x104>)
 8002f00:	22c8      	movs	r2, #200	; 0xc8
 8002f02:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002f04:	481e      	ldr	r0, [pc, #120]	; (8002f80 <SSD1306_setting+0x104>)
 8002f06:	f000 f9fb 	bl	8003300 <SSD1306_SendCommand>

	//Set COM Pins Hardware Configuration
	dcommands[1] = Set_COM_Pins_Hardware_Configuration;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <SSD1306_setting+0x100>)
 8002f0c:	22da      	movs	r2, #218	; 0xda
 8002f0e:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0x12;
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <SSD1306_setting+0x100>)
 8002f12:	2212      	movs	r2, #18
 8002f14:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002f16:	4819      	ldr	r0, [pc, #100]	; (8002f7c <SSD1306_setting+0x100>)
 8002f18:	f000 f9f2 	bl	8003300 <SSD1306_SendCommand>

	//Set Contrast Control
	dcommands[1] = Set_Contrast_Control;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <SSD1306_setting+0x100>)
 8002f1e:	2281      	movs	r2, #129	; 0x81
 8002f20:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0xFF;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <SSD1306_setting+0x100>)
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002f28:	4814      	ldr	r0, [pc, #80]	; (8002f7c <SSD1306_setting+0x100>)
 8002f2a:	f000 f9e9 	bl	8003300 <SSD1306_SendCommand>

	//Disable Entire Display ON
	scommands[1] = Disable_Entire_Display_ON;
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <SSD1306_setting+0x104>)
 8002f30:	22a4      	movs	r2, #164	; 0xa4
 8002f32:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002f34:	4812      	ldr	r0, [pc, #72]	; (8002f80 <SSD1306_setting+0x104>)
 8002f36:	f000 f9e3 	bl	8003300 <SSD1306_SendCommand>

	//Set Normal Display
	scommands[1] = Set_Normal_Display;
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <SSD1306_setting+0x104>)
 8002f3c:	22a6      	movs	r2, #166	; 0xa6
 8002f3e:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002f40:	480f      	ldr	r0, [pc, #60]	; (8002f80 <SSD1306_setting+0x104>)
 8002f42:	f000 f9dd 	bl	8003300 <SSD1306_SendCommand>

	//Set Osc Frequency
	dcommands[1] = Set_Osc_Frequency;
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <SSD1306_setting+0x100>)
 8002f48:	22d5      	movs	r2, #213	; 0xd5
 8002f4a:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0xF0;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <SSD1306_setting+0x100>)
 8002f4e:	22f0      	movs	r2, #240	; 0xf0
 8002f50:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002f52:	480a      	ldr	r0, [pc, #40]	; (8002f7c <SSD1306_setting+0x100>)
 8002f54:	f000 f9d4 	bl	8003300 <SSD1306_SendCommand>

	//Enable_Charge_Pump_Regulator
	dcommands[1] = Enable_Charge_Pump_Regulator;
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <SSD1306_setting+0x100>)
 8002f5a:	228d      	movs	r2, #141	; 0x8d
 8002f5c:	705a      	strb	r2, [r3, #1]
	dcommands[2] = 0x14;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <SSD1306_setting+0x100>)
 8002f60:	2214      	movs	r2, #20
 8002f62:	709a      	strb	r2, [r3, #2]
	SSD1306_SendCommand(dcommands);
 8002f64:	4805      	ldr	r0, [pc, #20]	; (8002f7c <SSD1306_setting+0x100>)
 8002f66:	f000 f9cb 	bl	8003300 <SSD1306_SendCommand>

	//Display On
	scommands[1] = Display_On;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SSD1306_setting+0x104>)
 8002f6c:	22af      	movs	r2, #175	; 0xaf
 8002f6e:	705a      	strb	r2, [r3, #1]
	SSD1306_SendCommand(scommands);
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <SSD1306_setting+0x104>)
 8002f72:	f000 f9c5 	bl	8003300 <SSD1306_SendCommand>
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200001e0 	.word	0x200001e0
 8002f80:	200001e4 	.word	0x200001e4

08002f84 <ssd1306_init>:
void ssd1306_init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	i2c_I2C2_GPIO_config();
 8002f88:	f7ff ff08 	bl	8002d9c <i2c_I2C2_GPIO_config>
	i2c_I2C2_config();
 8002f8c:	f7ff ff34 	bl	8002df8 <i2c_I2C2_config>


	if(HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDRESS, 1, 20000)==HAL_OK)
 8002f90:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f94:	2201      	movs	r2, #1
 8002f96:	2178      	movs	r1, #120	; 0x78
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <ssd1306_init+0x3c>)
 8002f9a:	f7fe fc47 	bl	800182c <HAL_I2C_IsDeviceReady>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <ssd1306_init+0x32>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fae:	f7fe f9a1 	bl	80012f4 <HAL_GPIO_WritePin>
		SSD1306_setting();
 8002fb2:	f7ff ff63 	bl	8002e7c <SSD1306_setting>
	}
	SSD1306_FillScreen(0);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f000 f804 	bl	8002fc4 <SSD1306_FillScreen>

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	2000018c 	.word	0x2000018c

08002fc4 <SSD1306_FillScreen>:
void SSD1306_FillScreen(uint8_t color)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]

    memset(localBuffer, color ? 0xFF : 0x00, sizeof(localBuffer));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <SSD1306_FillScreen+0x14>
 8002fd4:	23ff      	movs	r3, #255	; 0xff
 8002fd6:	e000      	b.n	8002fda <SSD1306_FillScreen+0x16>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <SSD1306_FillScreen+0x74>)
 8002fe2:	f000 fc2b 	bl	800383c <memset>


    for (uint8_t page = 0; page < 8; page++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e01c      	b.n	8003026 <SSD1306_FillScreen+0x62>
    {
        SSD1306_SetPageAddress(page);
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f83a 	bl	8003068 <SSD1306_SetPageAddress>
        SSD1306_SetColumnAddress(0);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f821 	bl	800303c <SSD1306_SetColumnAddress>

        for (uint8_t col = 0; col < 128; col++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73bb      	strb	r3, [r7, #14]
 8002ffe:	e00b      	b.n	8003018 <SSD1306_FillScreen+0x54>
        {
        	SSD1306_SendData(localBuffer[page * 128 + col]);
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	01da      	lsls	r2, r3, #7
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	4413      	add	r3, r2
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <SSD1306_FillScreen+0x74>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f841 	bl	8003094 <SSD1306_SendData>
        for (uint8_t col = 0; col < 128; col++)
 8003012:	7bbb      	ldrb	r3, [r7, #14]
 8003014:	3301      	adds	r3, #1
 8003016:	73bb      	strb	r3, [r7, #14]
 8003018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800301c:	2b00      	cmp	r3, #0
 800301e:	daef      	bge.n	8003000 <SSD1306_FillScreen+0x3c>
    for (uint8_t page = 0; page < 8; page++)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	3301      	adds	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b07      	cmp	r3, #7
 800302a:	d9df      	bls.n	8002fec <SSD1306_FillScreen+0x28>
        }
    }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200001e8 	.word	0x200001e8

0800303c <SSD1306_SetColumnAddress>:

void SSD1306_SetColumnAddress(uint8_t col)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
	uint8_t setColumnCmd[] = { 0x00, 0x21, col, 0x7F };
 8003046:	2300      	movs	r3, #0
 8003048:	733b      	strb	r3, [r7, #12]
 800304a:	2321      	movs	r3, #33	; 0x21
 800304c:	737b      	strb	r3, [r7, #13]
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	73bb      	strb	r3, [r7, #14]
 8003052:	237f      	movs	r3, #127	; 0x7f
 8003054:	73fb      	strb	r3, [r7, #15]
	SSD1306_SendCommand(setColumnCmd);
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f950 	bl	8003300 <SSD1306_SendCommand>
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <SSD1306_SetPageAddress>:

void SSD1306_SetPageAddress(uint8_t page)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
	uint8_t setPageCmd[] = { 0x00, 0x22, page, 0x07 };
 8003072:	2300      	movs	r3, #0
 8003074:	733b      	strb	r3, [r7, #12]
 8003076:	2322      	movs	r3, #34	; 0x22
 8003078:	737b      	strb	r3, [r7, #13]
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	73bb      	strb	r3, [r7, #14]
 800307e:	2307      	movs	r3, #7
 8003080:	73fb      	strb	r3, [r7, #15]
	SSD1306_SendCommand(setPageCmd);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f93a 	bl	8003300 <SSD1306_SendCommand>
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <SSD1306_SendData>:
void SSD1306_SendData(uint8_t data)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[2];
    payload[0] = 0x40;
 800309e:	2340      	movs	r3, #64	; 0x40
 80030a0:	733b      	strb	r3, [r7, #12]
    payload[1] = data;
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDRESS, payload, 2, HAL_MAX_DELAY);
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2302      	movs	r3, #2
 80030b2:	2178      	movs	r1, #120	; 0x78
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <SSD1306_SendData+0x30>)
 80030b6:	f7fe f9cf 	bl	8001458 <HAL_I2C_Master_Transmit>
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000018c 	.word	0x2000018c

080030c8 <gotoxy>:

void gotoxy(uint8_t x, uint8_t y)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	460a      	mov	r2, r1
 80030d2:	71fb      	strb	r3, [r7, #7]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.X = x;
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <gotoxy+0x2c>)
 80030de:	801a      	strh	r2, [r3, #0]
	SSD1306.Y = y;
 80030e0:	79bb      	ldrb	r3, [r7, #6]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <gotoxy+0x2c>)
 80030e6:	805a      	strh	r2, [r3, #2]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	200005e8 	.word	0x200005e8

080030f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

	for (uint8_t page = 0; page < 8; page++)
 80030fe:	2300      	movs	r3, #0
 8003100:	71fb      	strb	r3, [r7, #7]
 8003102:	e029      	b.n	8003158 <SSD1306_UpdateScreen+0x60>
	{
		//Set Page Start Address for Page Addressing Mode,0-7
		scommands[1] = (Set_Page_Start_Address+page);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	3b50      	subs	r3, #80	; 0x50
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 800310c:	705a      	strb	r2, [r3, #1]
		SSD1306_SendCommand(scommands);
 800310e:	4816      	ldr	r0, [pc, #88]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 8003110:	f000 f8f6 	bl	8003300 <SSD1306_SendCommand>

		//---set low column address
		scommands[1] = Set_Lcolumn_Saddress;
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 8003116:	2200      	movs	r2, #0
 8003118:	705a      	strb	r2, [r3, #1]
		SSD1306_SendCommand(scommands);
 800311a:	4813      	ldr	r0, [pc, #76]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 800311c:	f000 f8f0 	bl	8003300 <SSD1306_SendCommand>

		//---set high column address
		scommands[1] = Set_Hcolumn_Saddress;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 8003122:	2210      	movs	r2, #16
 8003124:	705a      	strb	r2, [r3, #1]
		SSD1306_SendCommand(scommands);
 8003126:	4810      	ldr	r0, [pc, #64]	; (8003168 <SSD1306_UpdateScreen+0x70>)
 8003128:	f000 f8ea 	bl	8003300 <SSD1306_SendCommand>
		for(uint8_t col = 0; col < 128; col++)
 800312c:	2300      	movs	r3, #0
 800312e:	71bb      	strb	r3, [r7, #6]
 8003130:	e00b      	b.n	800314a <SSD1306_UpdateScreen+0x52>
		{
			SSD1306_SendData(localBuffer[col+(page*128)]);
 8003132:	79ba      	ldrb	r2, [r7, #6]
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	4413      	add	r3, r2
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <SSD1306_UpdateScreen+0x74>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ffa8 	bl	8003094 <SSD1306_SendData>
		for(uint8_t col = 0; col < 128; col++)
 8003144:	79bb      	ldrb	r3, [r7, #6]
 8003146:	3301      	adds	r3, #1
 8003148:	71bb      	strb	r3, [r7, #6]
 800314a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	daef      	bge.n	8003132 <SSD1306_UpdateScreen+0x3a>
	for (uint8_t page = 0; page < 8; page++)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	3301      	adds	r3, #1
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b07      	cmp	r3, #7
 800315c:	d9d2      	bls.n	8003104 <SSD1306_UpdateScreen+0xc>
		}

	}
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200001e4 	.word	0x200001e4
 800316c:	200001e8 	.word	0x200001e8

08003170 <SSD1306_SetPixel>:

void SSD1306_SetPixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
 800317a:	460b      	mov	r3, r1
 800317c:	71bb      	strb	r3, [r7, #6]
 800317e:	4613      	mov	r3, r2
 8003180:	717b      	strb	r3, [r7, #5]
	if (x >= 128 || y >= 64)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db2f      	blt.n	80031ea <SSD1306_SetPixel+0x7a>
 800318a:	79bb      	ldrb	r3, [r7, #6]
 800318c:	2b3f      	cmp	r3, #63	; 0x3f
 800318e:	d82c      	bhi.n	80031ea <SSD1306_SetPixel+0x7a>
	{
	   return;
	}
	uint16_t byteIndex = x + (y / 8) * 128;
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	b29a      	uxth	r2, r3
 8003194:	79bb      	ldrb	r3, [r7, #6]
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b29b      	uxth	r3, r3
 800319c:	01db      	lsls	r3, r3, #7
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	81fb      	strh	r3, [r7, #14]
	uint8_t bitMask = 1 << (y % 8);
 80031a4:	79bb      	ldrb	r3, [r7, #6]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	2201      	movs	r2, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	737b      	strb	r3, [r7, #13]
	if (color)
 80031b2:	797b      	ldrb	r3, [r7, #5]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <SSD1306_SetPixel+0x5c>
	{
	    localBuffer[byteIndex] |= bitMask;
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <SSD1306_SetPixel+0x88>)
 80031bc:	5cd1      	ldrb	r1, [r2, r3]
 80031be:	89fb      	ldrh	r3, [r7, #14]
 80031c0:	7b7a      	ldrb	r2, [r7, #13]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	b2d1      	uxtb	r1, r2
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <SSD1306_SetPixel+0x88>)
 80031c8:	54d1      	strb	r1, [r2, r3]
 80031ca:	e00f      	b.n	80031ec <SSD1306_SetPixel+0x7c>
	}
	else
	{
	    localBuffer[byteIndex] &= ~bitMask;
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <SSD1306_SetPixel+0x88>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80031d8:	43db      	mvns	r3, r3
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	b25a      	sxtb	r2, r3
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	b2d1      	uxtb	r1, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <SSD1306_SetPixel+0x88>)
 80031e6:	54d1      	strb	r1, [r2, r3]
 80031e8:	e000      	b.n	80031ec <SSD1306_SetPixel+0x7c>
	   return;
 80031ea:	bf00      	nop
	}
}
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	200001e8 	.word	0x200001e8

080031fc <SSD1306_Putc>:
void SSD1306_Putc (char ch, FontDef_t* Font, SSD1306_COLOR color)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	4613      	mov	r3, r2
 800320a:	71bb      	strb	r3, [r7, #6]
	uint16_t data;


	for(int i=0;i<=18;i++)
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	e04a      	b.n	80032a8 <SSD1306_Putc+0xac>
	{
		data = Font->data[(ch - 32) * 18 + i];
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f1a3 0220 	sub.w	r2, r3, #32
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	461a      	mov	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	440b      	add	r3, r1
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	81fb      	strh	r3, [r7, #14]
		for(int j=0;j<=11;j++)
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e031      	b.n	800329c <SSD1306_Putc+0xa0>
		{
			if(data & (1 << (15 - j)))
 8003238:	89fa      	ldrh	r2, [r7, #14]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f1c3 030f 	rsb	r3, r3, #15
 8003240:	fa42 f303 	asr.w	r3, r2, r3
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <SSD1306_Putc+0x76>
			{
				SSD1306_SetPixel(SSD1306.X + j,SSD1306.Y + i, 1);
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <SSD1306_Putc+0xc8>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4413      	add	r3, r2
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <SSD1306_Putc+0xc8>)
 800325c:	885b      	ldrh	r3, [r3, #2]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4413      	add	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2201      	movs	r2, #1
 800326a:	4619      	mov	r1, r3
 800326c:	f7ff ff80 	bl	8003170 <SSD1306_SetPixel>
 8003270:	e011      	b.n	8003296 <SSD1306_Putc+0x9a>
			}
			else
			{
				SSD1306_SetPixel(SSD1306.X + j,SSD1306.Y + i, 0);
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <SSD1306_Putc+0xc8>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	4413      	add	r3, r2
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <SSD1306_Putc+0xc8>)
 8003282:	885b      	ldrh	r3, [r3, #2]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4413      	add	r3, r2
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2200      	movs	r2, #0
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff ff6d 	bl	8003170 <SSD1306_SetPixel>
		for(int j=0;j<=11;j++)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3301      	adds	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0b      	cmp	r3, #11
 80032a0:	ddca      	ble.n	8003238 <SSD1306_Putc+0x3c>
	for(int i=0;i<=18;i++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b12      	cmp	r3, #18
 80032ac:	ddb1      	ble.n	8003212 <SSD1306_Putc+0x16>
			}
		}
	}
	SSD1306.X += 11;
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <SSD1306_Putc+0xc8>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	330b      	adds	r3, #11
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <SSD1306_Putc+0xc8>)
 80032b8:	801a      	strh	r2, [r3, #0]
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200005e8 	.word	0x200005e8

080032c8 <SSD1306_Puts>:
char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR color)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 80032d6:	e009      	b.n	80032ec <SSD1306_Puts+0x24>
	{
		/* Write character by character */
		SSD1306_Putc(*str, Font, color);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff8b 	bl	80031fc <SSD1306_Putc>

		/* Increase string pointer */
		str++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
	while (*str)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f1      	bne.n	80032d8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	781b      	ldrb	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <SSD1306_SendCommand>:
	        }
	    }
	SSD1306_UpdateScreen();
}
void SSD1306_SendCommand(uint8_t *commands)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c2, SSD1306_I2C_ADDRESS , commands, sizeof(commands), HAL_MAX_DELAY);
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2304      	movs	r3, #4
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	2178      	movs	r1, #120	; 0x78
 8003314:	4803      	ldr	r0, [pc, #12]	; (8003324 <SSD1306_SendCommand+0x24>)
 8003316:	f7fe f89f 	bl	8001458 <HAL_I2C_Master_Transmit>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000018c 	.word	0x2000018c

08003328 <i2c_I2C1_GPIO_config>:
#include <vl6180x_hardware.h>

I2C_HandleTypeDef hi2c1;

void i2c_I2C1_GPIO_config(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInit = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <i2c_I2C1_GPIO_config+0x54>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <i2c_I2C1_GPIO_config+0x54>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <i2c_I2C1_GPIO_config+0x54>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
	gpioInit.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	607b      	str	r3, [r7, #4]
	gpioInit.Mode = GPIO_MODE_AF_OD;
 8003358:	2312      	movs	r3, #18
 800335a:	60bb      	str	r3, [r7, #8]
	gpioInit.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
	gpioInit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003360:	2302      	movs	r3, #2
 8003362:	613b      	str	r3, [r7, #16]
	gpioInit.Alternate = GPIO_AF4_I2C1;
 8003364:	2304      	movs	r3, #4
 8003366:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpioInit);
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4804      	ldr	r0, [pc, #16]	; (8003380 <i2c_I2C1_GPIO_config+0x58>)
 800336e:	f7fd fe17 	bl	8000fa0 <HAL_GPIO_Init>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	48000400 	.word	0x48000400

08003384 <i2c_config>:
void i2c_config(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_CLK_ENABLE();
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <i2c_config+0x74>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <i2c_config+0x74>)
 8003390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <i2c_config+0x74>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
	hi2c1.Instance = I2C1;
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <i2c_config+0x78>)
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <i2c_config+0x7c>)
 80033a6:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing =0x00702991;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <i2c_config+0x78>)
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <i2c_config+0x80>)
 80033ac:	605a      	str	r2, [r3, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <i2c_config+0x78>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <i2c_config+0x78>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <i2c_config+0x78>)
 80033bc:	2200      	movs	r2, #0
 80033be:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <i2c_config+0x78>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	621a      	str	r2, [r3, #32]
	hi2c1.Init.OwnAddress1 = 0;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <i2c_config+0x78>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress2 = 0;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <i2c_config+0x78>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <i2c_config+0x78>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
	HAL_I2C_Init(&hi2c1);
 80033d8:	4808      	ldr	r0, [pc, #32]	; (80033fc <i2c_config+0x78>)
 80033da:	f7fd ffa3 	bl	8001324 <HAL_I2C_Init>

	/** Configure Analog filter
		  */
	 HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 80033de:	2100      	movs	r1, #0
 80033e0:	4806      	ldr	r0, [pc, #24]	; (80033fc <i2c_config+0x78>)
 80033e2:	f7fe fda3 	bl	8001f2c <HAL_I2CEx_ConfigAnalogFilter>

	  /** Configure Digital filter
	  */
	  HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 80033e6:	2100      	movs	r1, #0
 80033e8:	4804      	ldr	r0, [pc, #16]	; (80033fc <i2c_config+0x78>)
 80033ea:	f7fe fdea 	bl	8001fc2 <HAL_I2CEx_ConfigDigitalFilter>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	200005ec 	.word	0x200005ec
 8003400:	40005400 	.word	0x40005400
 8003404:	00702991 	.word	0x00702991

08003408 <vl6180x_writebyte>:
void vl6180x_writebyte(uint16_t add, uint8_t data )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af02      	add	r7, sp, #8
 800340e:	4603      	mov	r3, r0
 8003410:	460a      	mov	r2, r1
 8003412:	80fb      	strh	r3, [r7, #6]
 8003414:	4613      	mov	r3, r2
 8003416:	717b      	strb	r3, [r7, #5]
	uint8_t final_data[3];
	final_data[0] = (add>>8);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	733b      	strb	r3, [r7, #12]
	final_data[1] = add;
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	737b      	strb	r3, [r7, #13]
	final_data[2] = data;
 8003428:	797b      	ldrb	r3, [r7, #5]
 800342a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, VL6180X_ADDR, final_data, 3, 10);
 800342c:	f107 020c 	add.w	r2, r7, #12
 8003430:	230a      	movs	r3, #10
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2303      	movs	r3, #3
 8003436:	2152      	movs	r1, #82	; 0x52
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <vl6180x_writebyte+0x44>)
 800343a:	f7fe f80d 	bl	8001458 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800343e:	200a      	movs	r0, #10
 8003440:	f7fd fca4 	bl	8000d8c <HAL_Delay>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200005ec 	.word	0x200005ec

08003450 <vl6180x_randomread>:
uint8_t vl6180x_randomread(uint16_t add)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
	uint8_t final_data[2],Rdata;
	final_data[0] = (add>>8);
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b29b      	uxth	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	733b      	strb	r3, [r7, #12]
	final_data[1] = add;
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, VL6180X_ADDR, final_data, 2, 10);
 800346a:	f107 020c 	add.w	r2, r7, #12
 800346e:	230a      	movs	r3, #10
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2302      	movs	r3, #2
 8003474:	2152      	movs	r1, #82	; 0x52
 8003476:	480a      	ldr	r0, [pc, #40]	; (80034a0 <vl6180x_randomread+0x50>)
 8003478:	f7fd ffee 	bl	8001458 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, VL6180X_ADDR,(uint8_t*)&Rdata, 1, 10);
 800347c:	f107 020b 	add.w	r2, r7, #11
 8003480:	230a      	movs	r3, #10
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2301      	movs	r3, #1
 8003486:	2152      	movs	r1, #82	; 0x52
 8003488:	4805      	ldr	r0, [pc, #20]	; (80034a0 <vl6180x_randomread+0x50>)
 800348a:	f7fe f8d9 	bl	8001640 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 800348e:	200a      	movs	r0, #10
 8003490:	f7fd fc7c 	bl	8000d8c <HAL_Delay>
	return Rdata;
 8003494:	7afb      	ldrb	r3, [r7, #11]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200005ec 	.word	0x200005ec

080034a4 <vl6180x_ALS_start>:
#include "vl6180x_middle.h"

////////////////////////////////////////////////////////////ALS///////////////////////////////////////////////////////

void vl6180x_ALS_start(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
	uint8_t Rvalue;

	Rvalue =  vl6180x_randomread(SYSTEM__INTERRUPT_CONFIG_GPIO);
 80034aa:	2014      	movs	r0, #20
 80034ac:	f7ff ffd0 	bl	8003450 <vl6180x_randomread>
 80034b0:	4603      	mov	r3, r0
 80034b2:	71fb      	strb	r3, [r7, #7]
	Rvalue &= 0b11000111;
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80034ba:	71fb      	strb	r3, [r7, #7]
	Rvalue |= (1<<5);
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f043 0320 	orr.w	r3, r3, #32
 80034c2:	71fb      	strb	r3, [r7, #7]
	vl6180x_writebyte(SYSTEM__INTERRUPT_CONFIG_GPIO, Rvalue);
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4619      	mov	r1, r3
 80034c8:	2014      	movs	r0, #20
 80034ca:	f7ff ff9d 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(SYSALS__INTEGRATION_PERIOD, 0x00);
 80034ce:	2100      	movs	r1, #0
 80034d0:	2040      	movs	r0, #64	; 0x40
 80034d2:	f7ff ff99 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0041, 0x31); // wasn't mention in datasheet
 80034d6:	2131      	movs	r1, #49	; 0x31
 80034d8:	2041      	movs	r0, #65	; 0x41
 80034da:	f7ff ff95 	bl	8003408 <vl6180x_writebyte>

	vl6180x_writebyte(SYSALS__START, 0b1);
 80034de:	2101      	movs	r1, #1
 80034e0:	2038      	movs	r0, #56	; 0x38
 80034e2:	f7ff ff91 	bl	8003408 <vl6180x_writebyte>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <vl6180x_ALS_read>:
uint16_t vl6180x_ALS_read(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0

	char data[2];
	char als_status,read;

	vl6180x_ALS_start();
 80034f6:	f7ff ffd5 	bl	80034a4 <vl6180x_ALS_start>
	// check the status
	als_status = vl6180x_randomread(RESULT__INTERRUPT_STATUS_GPIO);
 80034fa:	204f      	movs	r0, #79	; 0x4f
 80034fc:	f7ff ffa8 	bl	8003450 <vl6180x_randomread>
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
	als_status &= 0x38;
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350a:	71fb      	strb	r3, [r7, #7]

	// wait for new measurement ready status
	while (als_status != 0x20)
 800350c:	e008      	b.n	8003520 <vl6180x_ALS_read+0x30>
	{
		als_status = vl6180x_randomread(RESULT__INTERRUPT_STATUS_GPIO);
 800350e:	204f      	movs	r0, #79	; 0x4f
 8003510:	f7ff ff9e 	bl	8003450 <vl6180x_randomread>
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
		als_status &= 0x38;
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351e:	71fb      	strb	r3, [r7, #7]
	while (als_status != 0x20)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	2b20      	cmp	r3, #32
 8003524:	d1f3      	bne.n	800350e <vl6180x_ALS_read+0x1e>
	}

	// ALS data is 16 bit
	data[0]=vl6180x_randomread(RESULT__ALS_VAL);
 8003526:	2050      	movs	r0, #80	; 0x50
 8003528:	f7ff ff92 	bl	8003450 <vl6180x_randomread>
 800352c:	4603      	mov	r3, r0
 800352e:	703b      	strb	r3, [r7, #0]
	data[1]=vl6180x_randomread(RESULT__ALS_VAL + 0x1);
 8003530:	2051      	movs	r0, #81	; 0x51
 8003532:	f7ff ff8d 	bl	8003450 <vl6180x_randomread>
 8003536:	4603      	mov	r3, r0
 8003538:	707b      	strb	r3, [r7, #1]

	uint16_t ALS_count = (data[0] << 8 ) | (data[1] );
 800353a:	783b      	ldrb	r3, [r7, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	b21a      	sxth	r2, r3
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	b21b      	sxth	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b21b      	sxth	r3, r3
 8003548:	80bb      	strh	r3, [r7, #4]


	read =  vl6180x_randomread(SYSTEM__INTERRUPT_CLEAR);
 800354a:	2015      	movs	r0, #21
 800354c:	f7ff ff80 	bl	8003450 <vl6180x_randomread>
 8003550:	4603      	mov	r3, r0
 8003552:	70fb      	strb	r3, [r7, #3]
	read |= 0b00000110;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f043 0306 	orr.w	r3, r3, #6
 800355a:	70fb      	strb	r3, [r7, #3]
	vl6180x_writebyte(SYSTEM__INTERRUPT_CLEAR, read);
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	4619      	mov	r1, r3
 8003560:	2015      	movs	r0, #21
 8003562:	f7ff ff51 	bl	8003408 <vl6180x_writebyte>

	return ((int)ALS_count * 0.64);
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffd3 	bl	8000514 <__aeabi_i2d>
 800356e:	a308      	add	r3, pc, #32	; (adr r3, 8003590 <vl6180x_ALS_read+0xa0>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fd f838 	bl	80005e8 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd fa44 	bl	8000a0c <__aeabi_d2uiz>
 8003584:	4603      	mov	r3, r0
 8003586:	b29b      	uxth	r3, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	47ae147b 	.word	0x47ae147b
 8003594:	3fe47ae1 	.word	0x3fe47ae1

08003598 <vl6180x_TOF_start>:

}

//////////////////////////////////////////////////////TOF/////////////////////////////////////////////////////////////
void vl6180x_TOF_start(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
	uint8_t Rvalue;

	Rvalue =  vl6180x_randomread(SYSTEM__INTERRUPT_CONFIG_GPIO);
 800359e:	2014      	movs	r0, #20
 80035a0:	f7ff ff56 	bl	8003450 <vl6180x_randomread>
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
	Rvalue &= 0b11111000;
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	71fb      	strb	r3, [r7, #7]
	Rvalue |= (1<<2);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	71fb      	strb	r3, [r7, #7]
	vl6180x_writebyte(SYSTEM__INTERRUPT_CONFIG_GPIO, Rvalue);
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4619      	mov	r1, r3
 80035bc:	2014      	movs	r0, #20
 80035be:	f7ff ff23 	bl	8003408 <vl6180x_writebyte>

	vl6180x_writebyte(SYSRANGE__START, 0b1);
 80035c2:	2101      	movs	r1, #1
 80035c4:	2018      	movs	r0, #24
 80035c6:	f7ff ff1f 	bl	8003408 <vl6180x_writebyte>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <vl6180x_TOF_read>:
uint8_t vl6180x_TOF_read(void)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
	uint8_t read,Rvalue;
	char range_status;

	vl6180x_TOF_start();
 80035d8:	f7ff ffde 	bl	8003598 <vl6180x_TOF_start>

	// check the status
	range_status = vl6180x_randomread(RESULT__INTERRUPT_STATUS_GPIO);
 80035dc:	204f      	movs	r0, #79	; 0x4f
 80035de:	f7ff ff37 	bl	8003450 <vl6180x_randomread>
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
	range_status &= 0x07;
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	71fb      	strb	r3, [r7, #7]

	// wait for new measurement ready status
	while (range_status != 0x04)
 80035ee:	e008      	b.n	8003602 <vl6180x_TOF_read+0x30>
	{
		range_status = vl6180x_randomread(RESULT__INTERRUPT_STATUS_GPIO);
 80035f0:	204f      	movs	r0, #79	; 0x4f
 80035f2:	f7ff ff2d 	bl	8003450 <vl6180x_randomread>
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
		range_status &= 0x07;
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	71fb      	strb	r3, [r7, #7]
	while (range_status != 0x04)
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d1f3      	bne.n	80035f0 <vl6180x_TOF_read+0x1e>
	}

	Rvalue =  vl6180x_randomread(RESULT__RANGE_VAL);
 8003608:	2062      	movs	r0, #98	; 0x62
 800360a:	f7ff ff21 	bl	8003450 <vl6180x_randomread>
 800360e:	4603      	mov	r3, r0
 8003610:	71bb      	strb	r3, [r7, #6]

	read =  vl6180x_randomread(SYSTEM__INTERRUPT_CLEAR);
 8003612:	2015      	movs	r0, #21
 8003614:	f7ff ff1c 	bl	8003450 <vl6180x_randomread>
 8003618:	4603      	mov	r3, r0
 800361a:	717b      	strb	r3, [r7, #5]
	read |= 0b00000101;
 800361c:	797b      	ldrb	r3, [r7, #5]
 800361e:	f043 0305 	orr.w	r3, r3, #5
 8003622:	717b      	strb	r3, [r7, #5]
	vl6180x_writebyte(SYSTEM__INTERRUPT_CLEAR, read);
 8003624:	797b      	ldrb	r3, [r7, #5]
 8003626:	4619      	mov	r1, r3
 8003628:	2015      	movs	r0, #21
 800362a:	f7ff feed 	bl	8003408 <vl6180x_writebyte>
	return Rvalue;
 800362e:	79bb      	ldrb	r3, [r7, #6]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <vl6180x_setting>:



void vl6180x_setting(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	vl6180x_writebyte(0x0207, 0x01);
 800363c:	2101      	movs	r1, #1
 800363e:	f240 2007 	movw	r0, #519	; 0x207
 8003642:	f7ff fee1 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0208, 0x01);
 8003646:	2101      	movs	r1, #1
 8003648:	f44f 7002 	mov.w	r0, #520	; 0x208
 800364c:	f7ff fedc 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0133, 0x01);
 8003650:	2101      	movs	r1, #1
 8003652:	f240 1033 	movw	r0, #307	; 0x133
 8003656:	f7ff fed7 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0096, 0x00);
 800365a:	2100      	movs	r1, #0
 800365c:	2096      	movs	r0, #150	; 0x96
 800365e:	f7ff fed3 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0097, 0xFD);
 8003662:	21fd      	movs	r1, #253	; 0xfd
 8003664:	2097      	movs	r0, #151	; 0x97
 8003666:	f7ff fecf 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00e3, 0x00);
 800366a:	2100      	movs	r1, #0
 800366c:	20e3      	movs	r0, #227	; 0xe3
 800366e:	f7ff fecb 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00e4, 0x04);
 8003672:	2104      	movs	r1, #4
 8003674:	20e4      	movs	r0, #228	; 0xe4
 8003676:	f7ff fec7 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00e5, 0x02);
 800367a:	2102      	movs	r1, #2
 800367c:	20e5      	movs	r0, #229	; 0xe5
 800367e:	f7ff fec3 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00e6, 0x01);
 8003682:	2101      	movs	r1, #1
 8003684:	20e6      	movs	r0, #230	; 0xe6
 8003686:	f7ff febf 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00e7, 0x03);
 800368a:	2103      	movs	r1, #3
 800368c:	20e7      	movs	r0, #231	; 0xe7
 800368e:	f7ff febb 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00f5, 0x02);
 8003692:	2102      	movs	r1, #2
 8003694:	20f5      	movs	r0, #245	; 0xf5
 8003696:	f7ff feb7 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00D9, 0x05);
 800369a:	2105      	movs	r1, #5
 800369c:	20d9      	movs	r0, #217	; 0xd9
 800369e:	f7ff feb3 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00DB, 0xCE);
 80036a2:	21ce      	movs	r1, #206	; 0xce
 80036a4:	20db      	movs	r0, #219	; 0xdb
 80036a6:	f7ff feaf 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00DC, 0x03);
 80036aa:	2103      	movs	r1, #3
 80036ac:	20dc      	movs	r0, #220	; 0xdc
 80036ae:	f7ff feab 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00DD, 0xF8);
 80036b2:	21f8      	movs	r1, #248	; 0xf8
 80036b4:	20dd      	movs	r0, #221	; 0xdd
 80036b6:	f7ff fea7 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x009f, 0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	209f      	movs	r0, #159	; 0x9f
 80036be:	f7ff fea3 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00a3, 0x3c);
 80036c2:	213c      	movs	r1, #60	; 0x3c
 80036c4:	20a3      	movs	r0, #163	; 0xa3
 80036c6:	f7ff fe9f 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00b7, 0x00);
 80036ca:	2100      	movs	r1, #0
 80036cc:	20b7      	movs	r0, #183	; 0xb7
 80036ce:	f7ff fe9b 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00bb, 0x3c);
 80036d2:	213c      	movs	r1, #60	; 0x3c
 80036d4:	20bb      	movs	r0, #187	; 0xbb
 80036d6:	f7ff fe97 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00b2, 0x09);
 80036da:	2109      	movs	r1, #9
 80036dc:	20b2      	movs	r0, #178	; 0xb2
 80036de:	f7ff fe93 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00ca, 0x09);
 80036e2:	2109      	movs	r1, #9
 80036e4:	20ca      	movs	r0, #202	; 0xca
 80036e6:	f7ff fe8f 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0198, 0x01);
 80036ea:	2101      	movs	r1, #1
 80036ec:	f44f 70cc 	mov.w	r0, #408	; 0x198
 80036f0:	f7ff fe8a 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x01b0, 0x17);
 80036f4:	2117      	movs	r1, #23
 80036f6:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 80036fa:	f7ff fe85 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x01ad, 0x00);
 80036fe:	2100      	movs	r1, #0
 8003700:	f240 10ad 	movw	r0, #429	; 0x1ad
 8003704:	f7ff fe80 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00FF, 0x05);
 8003708:	2105      	movs	r1, #5
 800370a:	20ff      	movs	r0, #255	; 0xff
 800370c:	f7ff fe7c 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0100, 0x05);
 8003710:	2105      	movs	r1, #5
 8003712:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003716:	f7ff fe77 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0199, 0x05);
 800371a:	2105      	movs	r1, #5
 800371c:	f240 1099 	movw	r0, #409	; 0x199
 8003720:	f7ff fe72 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0109, 0x07);
 8003724:	2107      	movs	r1, #7
 8003726:	f240 1009 	movw	r0, #265	; 0x109
 800372a:	f7ff fe6d 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x010a, 0x30);
 800372e:	2130      	movs	r1, #48	; 0x30
 8003730:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8003734:	f7ff fe68 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x003f, 0x46);
 8003738:	2146      	movs	r1, #70	; 0x46
 800373a:	203f      	movs	r0, #63	; 0x3f
 800373c:	f7ff fe64 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x01a6, 0x1b);
 8003740:	211b      	movs	r1, #27
 8003742:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
 8003746:	f7ff fe5f 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x01ac, 0x3e);
 800374a:	213e      	movs	r1, #62	; 0x3e
 800374c:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 8003750:	f7ff fe5a 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x01a7, 0x1f);
 8003754:	211f      	movs	r1, #31
 8003756:	f240 10a7 	movw	r0, #423	; 0x1a7
 800375a:	f7ff fe55 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0103, 0x01);
 800375e:	2101      	movs	r1, #1
 8003760:	f240 1003 	movw	r0, #259	; 0x103
 8003764:	f7ff fe50 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0030, 0x00);
 8003768:	2100      	movs	r1, #0
 800376a:	2030      	movs	r0, #48	; 0x30
 800376c:	f7ff fe4c 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x001b, 0x0A);
 8003770:	210a      	movs	r1, #10
 8003772:	201b      	movs	r0, #27
 8003774:	f7ff fe48 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x003e, 0x0A);
 8003778:	210a      	movs	r1, #10
 800377a:	203e      	movs	r0, #62	; 0x3e
 800377c:	f7ff fe44 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0131, 0x04);
 8003780:	2104      	movs	r1, #4
 8003782:	f240 1031 	movw	r0, #305	; 0x131
 8003786:	f7ff fe3f 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0011, 0x10);
 800378a:	2110      	movs	r1, #16
 800378c:	2011      	movs	r0, #17
 800378e:	f7ff fe3b 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0014, 0x24);
 8003792:	2124      	movs	r1, #36	; 0x24
 8003794:	2014      	movs	r0, #20
 8003796:	f7ff fe37 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x0031, 0xFF);
 800379a:	21ff      	movs	r1, #255	; 0xff
 800379c:	2031      	movs	r0, #49	; 0x31
 800379e:	f7ff fe33 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00d2, 0x01);
 80037a2:	2101      	movs	r1, #1
 80037a4:	20d2      	movs	r0, #210	; 0xd2
 80037a6:	f7ff fe2f 	bl	8003408 <vl6180x_writebyte>
	vl6180x_writebyte(0x00f2, 0x01);
 80037aa:	2101      	movs	r1, #1
 80037ac:	20f2      	movs	r0, #242	; 0xf2
 80037ae:	f7ff fe2b 	bl	8003408 <vl6180x_writebyte>
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <vl6180x_init>:
void vl6180x_init(void)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
	uint8_t reset;
	i2c_I2C1_GPIO_config();
 80037bc:	f7ff fdb4 	bl	8003328 <i2c_I2C1_GPIO_config>
	i2c_config();
 80037c0:	f7ff fde0 	bl	8003384 <i2c_config>
	reset =  vl6180x_randomread(SYSTEM__FRESH_OUT_OF_RESET);
 80037c4:	2016      	movs	r0, #22
 80037c6:	f7ff fe43 	bl	8003450 <vl6180x_randomread>
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
	if(reset == 0x01)
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <vl6180x_init+0x2a>
	{
		vl6180x_setting();
 80037d4:	f7ff ff30 	bl	8003638 <vl6180x_setting>
		vl6180x_writebyte(SYSTEM__FRESH_OUT_OF_RESET, 0x00);
 80037d8:	2100      	movs	r1, #0
 80037da:	2016      	movs	r0, #22
 80037dc:	f7ff fe14 	bl	8003408 <vl6180x_writebyte>
	}
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <__errno>:
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <__errno+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000014 	.word	0x20000014

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4d0d      	ldr	r5, [pc, #52]	; (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2600      	movs	r6, #0
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4d0b      	ldr	r5, [pc, #44]	; (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	; (8003838 <__libc_init_array+0x44>)
 8003808:	f000 fc8e 	bl	8004128 <_init>
 800380c:	1b64      	subs	r4, r4, r5
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2600      	movs	r6, #0
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	08004f2c 	.word	0x08004f2c
 8003830:	08004f2c 	.word	0x08004f2c
 8003834:	08004f2c 	.word	0x08004f2c
 8003838:	08004f30 	.word	0x08004f30

0800383c <memset>:
 800383c:	4402      	add	r2, r0
 800383e:	4603      	mov	r3, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <siprintf>:
 800384c:	b40e      	push	{r1, r2, r3}
 800384e:	b500      	push	{lr}
 8003850:	b09c      	sub	sp, #112	; 0x70
 8003852:	ab1d      	add	r3, sp, #116	; 0x74
 8003854:	9002      	str	r0, [sp, #8]
 8003856:	9006      	str	r0, [sp, #24]
 8003858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800385c:	4809      	ldr	r0, [pc, #36]	; (8003884 <siprintf+0x38>)
 800385e:	9107      	str	r1, [sp, #28]
 8003860:	9104      	str	r1, [sp, #16]
 8003862:	4909      	ldr	r1, [pc, #36]	; (8003888 <siprintf+0x3c>)
 8003864:	f853 2b04 	ldr.w	r2, [r3], #4
 8003868:	9105      	str	r1, [sp, #20]
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	a902      	add	r1, sp, #8
 8003870:	f000 f868 	bl	8003944 <_svfiprintf_r>
 8003874:	9b02      	ldr	r3, [sp, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	b01c      	add	sp, #112	; 0x70
 800387c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003880:	b003      	add	sp, #12
 8003882:	4770      	bx	lr
 8003884:	20000014 	.word	0x20000014
 8003888:	ffff0208 	.word	0xffff0208

0800388c <__ssputs_r>:
 800388c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	688e      	ldr	r6, [r1, #8]
 8003892:	429e      	cmp	r6, r3
 8003894:	4682      	mov	sl, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4690      	mov	r8, r2
 800389a:	461f      	mov	r7, r3
 800389c:	d838      	bhi.n	8003910 <__ssputs_r+0x84>
 800389e:	898a      	ldrh	r2, [r1, #12]
 80038a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a4:	d032      	beq.n	800390c <__ssputs_r+0x80>
 80038a6:	6825      	ldr	r5, [r4, #0]
 80038a8:	6909      	ldr	r1, [r1, #16]
 80038aa:	eba5 0901 	sub.w	r9, r5, r1
 80038ae:	6965      	ldr	r5, [r4, #20]
 80038b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038b8:	3301      	adds	r3, #1
 80038ba:	444b      	add	r3, r9
 80038bc:	106d      	asrs	r5, r5, #1
 80038be:	429d      	cmp	r5, r3
 80038c0:	bf38      	it	cc
 80038c2:	461d      	movcc	r5, r3
 80038c4:	0553      	lsls	r3, r2, #21
 80038c6:	d531      	bpl.n	800392c <__ssputs_r+0xa0>
 80038c8:	4629      	mov	r1, r5
 80038ca:	f000 fb63 	bl	8003f94 <_malloc_r>
 80038ce:	4606      	mov	r6, r0
 80038d0:	b950      	cbnz	r0, 80038e8 <__ssputs_r+0x5c>
 80038d2:	230c      	movs	r3, #12
 80038d4:	f8ca 3000 	str.w	r3, [sl]
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	6921      	ldr	r1, [r4, #16]
 80038ea:	464a      	mov	r2, r9
 80038ec:	f000 fabe 	bl	8003e6c <memcpy>
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	6126      	str	r6, [r4, #16]
 80038fe:	6165      	str	r5, [r4, #20]
 8003900:	444e      	add	r6, r9
 8003902:	eba5 0509 	sub.w	r5, r5, r9
 8003906:	6026      	str	r6, [r4, #0]
 8003908:	60a5      	str	r5, [r4, #8]
 800390a:	463e      	mov	r6, r7
 800390c:	42be      	cmp	r6, r7
 800390e:	d900      	bls.n	8003912 <__ssputs_r+0x86>
 8003910:	463e      	mov	r6, r7
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	4632      	mov	r2, r6
 8003916:	4641      	mov	r1, r8
 8003918:	f000 fab6 	bl	8003e88 <memmove>
 800391c:	68a3      	ldr	r3, [r4, #8]
 800391e:	1b9b      	subs	r3, r3, r6
 8003920:	60a3      	str	r3, [r4, #8]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	4433      	add	r3, r6
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	2000      	movs	r0, #0
 800392a:	e7db      	b.n	80038e4 <__ssputs_r+0x58>
 800392c:	462a      	mov	r2, r5
 800392e:	f000 fba5 	bl	800407c <_realloc_r>
 8003932:	4606      	mov	r6, r0
 8003934:	2800      	cmp	r0, #0
 8003936:	d1e1      	bne.n	80038fc <__ssputs_r+0x70>
 8003938:	6921      	ldr	r1, [r4, #16]
 800393a:	4650      	mov	r0, sl
 800393c:	f000 fabe 	bl	8003ebc <_free_r>
 8003940:	e7c7      	b.n	80038d2 <__ssputs_r+0x46>
	...

08003944 <_svfiprintf_r>:
 8003944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003948:	4698      	mov	r8, r3
 800394a:	898b      	ldrh	r3, [r1, #12]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	b09d      	sub	sp, #116	; 0x74
 8003950:	4607      	mov	r7, r0
 8003952:	460d      	mov	r5, r1
 8003954:	4614      	mov	r4, r2
 8003956:	d50e      	bpl.n	8003976 <_svfiprintf_r+0x32>
 8003958:	690b      	ldr	r3, [r1, #16]
 800395a:	b963      	cbnz	r3, 8003976 <_svfiprintf_r+0x32>
 800395c:	2140      	movs	r1, #64	; 0x40
 800395e:	f000 fb19 	bl	8003f94 <_malloc_r>
 8003962:	6028      	str	r0, [r5, #0]
 8003964:	6128      	str	r0, [r5, #16]
 8003966:	b920      	cbnz	r0, 8003972 <_svfiprintf_r+0x2e>
 8003968:	230c      	movs	r3, #12
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	e0d1      	b.n	8003b16 <_svfiprintf_r+0x1d2>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	616b      	str	r3, [r5, #20]
 8003976:	2300      	movs	r3, #0
 8003978:	9309      	str	r3, [sp, #36]	; 0x24
 800397a:	2320      	movs	r3, #32
 800397c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003980:	f8cd 800c 	str.w	r8, [sp, #12]
 8003984:	2330      	movs	r3, #48	; 0x30
 8003986:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b30 <_svfiprintf_r+0x1ec>
 800398a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800398e:	f04f 0901 	mov.w	r9, #1
 8003992:	4623      	mov	r3, r4
 8003994:	469a      	mov	sl, r3
 8003996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800399a:	b10a      	cbz	r2, 80039a0 <_svfiprintf_r+0x5c>
 800399c:	2a25      	cmp	r2, #37	; 0x25
 800399e:	d1f9      	bne.n	8003994 <_svfiprintf_r+0x50>
 80039a0:	ebba 0b04 	subs.w	fp, sl, r4
 80039a4:	d00b      	beq.n	80039be <_svfiprintf_r+0x7a>
 80039a6:	465b      	mov	r3, fp
 80039a8:	4622      	mov	r2, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	4638      	mov	r0, r7
 80039ae:	f7ff ff6d 	bl	800388c <__ssputs_r>
 80039b2:	3001      	adds	r0, #1
 80039b4:	f000 80aa 	beq.w	8003b0c <_svfiprintf_r+0x1c8>
 80039b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039ba:	445a      	add	r2, fp
 80039bc:	9209      	str	r2, [sp, #36]	; 0x24
 80039be:	f89a 3000 	ldrb.w	r3, [sl]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a2 	beq.w	8003b0c <_svfiprintf_r+0x1c8>
 80039c8:	2300      	movs	r3, #0
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295
 80039ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039d2:	f10a 0a01 	add.w	sl, sl, #1
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	9307      	str	r3, [sp, #28]
 80039da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039de:	931a      	str	r3, [sp, #104]	; 0x68
 80039e0:	4654      	mov	r4, sl
 80039e2:	2205      	movs	r2, #5
 80039e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e8:	4851      	ldr	r0, [pc, #324]	; (8003b30 <_svfiprintf_r+0x1ec>)
 80039ea:	f7fc fbf1 	bl	80001d0 <memchr>
 80039ee:	9a04      	ldr	r2, [sp, #16]
 80039f0:	b9d8      	cbnz	r0, 8003a2a <_svfiprintf_r+0xe6>
 80039f2:	06d0      	lsls	r0, r2, #27
 80039f4:	bf44      	itt	mi
 80039f6:	2320      	movmi	r3, #32
 80039f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039fc:	0711      	lsls	r1, r2, #28
 80039fe:	bf44      	itt	mi
 8003a00:	232b      	movmi	r3, #43	; 0x2b
 8003a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a06:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0c:	d015      	beq.n	8003a3a <_svfiprintf_r+0xf6>
 8003a0e:	9a07      	ldr	r2, [sp, #28]
 8003a10:	4654      	mov	r4, sl
 8003a12:	2000      	movs	r0, #0
 8003a14:	f04f 0c0a 	mov.w	ip, #10
 8003a18:	4621      	mov	r1, r4
 8003a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a1e:	3b30      	subs	r3, #48	; 0x30
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	d94e      	bls.n	8003ac2 <_svfiprintf_r+0x17e>
 8003a24:	b1b0      	cbz	r0, 8003a54 <_svfiprintf_r+0x110>
 8003a26:	9207      	str	r2, [sp, #28]
 8003a28:	e014      	b.n	8003a54 <_svfiprintf_r+0x110>
 8003a2a:	eba0 0308 	sub.w	r3, r0, r8
 8003a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a32:	4313      	orrs	r3, r2
 8003a34:	9304      	str	r3, [sp, #16]
 8003a36:	46a2      	mov	sl, r4
 8003a38:	e7d2      	b.n	80039e0 <_svfiprintf_r+0x9c>
 8003a3a:	9b03      	ldr	r3, [sp, #12]
 8003a3c:	1d19      	adds	r1, r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9103      	str	r1, [sp, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfbb      	ittet	lt
 8003a46:	425b      	neglt	r3, r3
 8003a48:	f042 0202 	orrlt.w	r2, r2, #2
 8003a4c:	9307      	strge	r3, [sp, #28]
 8003a4e:	9307      	strlt	r3, [sp, #28]
 8003a50:	bfb8      	it	lt
 8003a52:	9204      	strlt	r2, [sp, #16]
 8003a54:	7823      	ldrb	r3, [r4, #0]
 8003a56:	2b2e      	cmp	r3, #46	; 0x2e
 8003a58:	d10c      	bne.n	8003a74 <_svfiprintf_r+0x130>
 8003a5a:	7863      	ldrb	r3, [r4, #1]
 8003a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5e:	d135      	bne.n	8003acc <_svfiprintf_r+0x188>
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	1d1a      	adds	r2, r3, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	9203      	str	r2, [sp, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bfb8      	it	lt
 8003a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a70:	3402      	adds	r4, #2
 8003a72:	9305      	str	r3, [sp, #20]
 8003a74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b40 <_svfiprintf_r+0x1fc>
 8003a78:	7821      	ldrb	r1, [r4, #0]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	f7fc fba7 	bl	80001d0 <memchr>
 8003a82:	b140      	cbz	r0, 8003a96 <_svfiprintf_r+0x152>
 8003a84:	2340      	movs	r3, #64	; 0x40
 8003a86:	eba0 000a 	sub.w	r0, r0, sl
 8003a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a8e:	9b04      	ldr	r3, [sp, #16]
 8003a90:	4303      	orrs	r3, r0
 8003a92:	3401      	adds	r4, #1
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9a:	4826      	ldr	r0, [pc, #152]	; (8003b34 <_svfiprintf_r+0x1f0>)
 8003a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	f7fc fb95 	bl	80001d0 <memchr>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d038      	beq.n	8003b1c <_svfiprintf_r+0x1d8>
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <_svfiprintf_r+0x1f4>)
 8003aac:	bb1b      	cbnz	r3, 8003af6 <_svfiprintf_r+0x1b2>
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	3307      	adds	r3, #7
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	9303      	str	r3, [sp, #12]
 8003aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003abc:	4433      	add	r3, r6
 8003abe:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac0:	e767      	b.n	8003992 <_svfiprintf_r+0x4e>
 8003ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e7a5      	b.n	8003a18 <_svfiprintf_r+0xd4>
 8003acc:	2300      	movs	r3, #0
 8003ace:	3401      	adds	r4, #1
 8003ad0:	9305      	str	r3, [sp, #20]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f04f 0c0a 	mov.w	ip, #10
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ade:	3a30      	subs	r2, #48	; 0x30
 8003ae0:	2a09      	cmp	r2, #9
 8003ae2:	d903      	bls.n	8003aec <_svfiprintf_r+0x1a8>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0c5      	beq.n	8003a74 <_svfiprintf_r+0x130>
 8003ae8:	9105      	str	r1, [sp, #20]
 8003aea:	e7c3      	b.n	8003a74 <_svfiprintf_r+0x130>
 8003aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003af0:	4604      	mov	r4, r0
 8003af2:	2301      	movs	r3, #1
 8003af4:	e7f0      	b.n	8003ad8 <_svfiprintf_r+0x194>
 8003af6:	ab03      	add	r3, sp, #12
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	462a      	mov	r2, r5
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <_svfiprintf_r+0x1f8>)
 8003afe:	a904      	add	r1, sp, #16
 8003b00:	4638      	mov	r0, r7
 8003b02:	f3af 8000 	nop.w
 8003b06:	1c42      	adds	r2, r0, #1
 8003b08:	4606      	mov	r6, r0
 8003b0a:	d1d6      	bne.n	8003aba <_svfiprintf_r+0x176>
 8003b0c:	89ab      	ldrh	r3, [r5, #12]
 8003b0e:	065b      	lsls	r3, r3, #25
 8003b10:	f53f af2c 	bmi.w	800396c <_svfiprintf_r+0x28>
 8003b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b16:	b01d      	add	sp, #116	; 0x74
 8003b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1c:	ab03      	add	r3, sp, #12
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462a      	mov	r2, r5
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <_svfiprintf_r+0x1f8>)
 8003b24:	a904      	add	r1, sp, #16
 8003b26:	4638      	mov	r0, r7
 8003b28:	f000 f87a 	bl	8003c20 <_printf_i>
 8003b2c:	e7eb      	b.n	8003b06 <_svfiprintf_r+0x1c2>
 8003b2e:	bf00      	nop
 8003b30:	08004ef8 	.word	0x08004ef8
 8003b34:	08004f02 	.word	0x08004f02
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	0800388d 	.word	0x0800388d
 8003b40:	08004efe 	.word	0x08004efe

08003b44 <_printf_common>:
 8003b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	4616      	mov	r6, r2
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	688a      	ldr	r2, [r1, #8]
 8003b4e:	690b      	ldr	r3, [r1, #16]
 8003b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bfb8      	it	lt
 8003b58:	4613      	movlt	r3, r2
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b60:	4607      	mov	r7, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	b10a      	cbz	r2, 8003b6a <_printf_common+0x26>
 8003b66:	3301      	adds	r3, #1
 8003b68:	6033      	str	r3, [r6, #0]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	0699      	lsls	r1, r3, #26
 8003b6e:	bf42      	ittt	mi
 8003b70:	6833      	ldrmi	r3, [r6, #0]
 8003b72:	3302      	addmi	r3, #2
 8003b74:	6033      	strmi	r3, [r6, #0]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	f015 0506 	ands.w	r5, r5, #6
 8003b7c:	d106      	bne.n	8003b8c <_printf_common+0x48>
 8003b7e:	f104 0a19 	add.w	sl, r4, #25
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	6832      	ldr	r2, [r6, #0]
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	dc26      	bgt.n	8003bda <_printf_common+0x96>
 8003b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b90:	1e13      	subs	r3, r2, #0
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	bf18      	it	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	0692      	lsls	r2, r2, #26
 8003b9a:	d42b      	bmi.n	8003bf4 <_printf_common+0xb0>
 8003b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d01e      	beq.n	8003be8 <_printf_common+0xa4>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	68e5      	ldr	r5, [r4, #12]
 8003bae:	6832      	ldr	r2, [r6, #0]
 8003bb0:	f003 0306 	and.w	r3, r3, #6
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	bf08      	it	eq
 8003bb8:	1aad      	subeq	r5, r5, r2
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	6922      	ldr	r2, [r4, #16]
 8003bbe:	bf0c      	ite	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	2500      	movne	r5, #0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfc4      	itt	gt
 8003bca:	1a9b      	subgt	r3, r3, r2
 8003bcc:	18ed      	addgt	r5, r5, r3
 8003bce:	2600      	movs	r6, #0
 8003bd0:	341a      	adds	r4, #26
 8003bd2:	42b5      	cmp	r5, r6
 8003bd4:	d11a      	bne.n	8003c0c <_printf_common+0xc8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e008      	b.n	8003bec <_printf_common+0xa8>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4652      	mov	r2, sl
 8003bde:	4649      	mov	r1, r9
 8003be0:	4638      	mov	r0, r7
 8003be2:	47c0      	blx	r8
 8003be4:	3001      	adds	r0, #1
 8003be6:	d103      	bne.n	8003bf0 <_printf_common+0xac>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	3501      	adds	r5, #1
 8003bf2:	e7c6      	b.n	8003b82 <_printf_common+0x3e>
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	2030      	movs	r0, #48	; 0x30
 8003bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bfe:	4422      	add	r2, r4
 8003c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c08:	3302      	adds	r3, #2
 8003c0a:	e7c7      	b.n	8003b9c <_printf_common+0x58>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4622      	mov	r2, r4
 8003c10:	4649      	mov	r1, r9
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c0      	blx	r8
 8003c16:	3001      	adds	r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa4>
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7d9      	b.n	8003bd2 <_printf_common+0x8e>
	...

08003c20 <_printf_i>:
 8003c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c24:	7e0f      	ldrb	r7, [r1, #24]
 8003c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c28:	2f78      	cmp	r7, #120	; 0x78
 8003c2a:	4691      	mov	r9, r2
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	469a      	mov	sl, r3
 8003c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c36:	d807      	bhi.n	8003c48 <_printf_i+0x28>
 8003c38:	2f62      	cmp	r7, #98	; 0x62
 8003c3a:	d80a      	bhi.n	8003c52 <_printf_i+0x32>
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	f000 80d8 	beq.w	8003df2 <_printf_i+0x1d2>
 8003c42:	2f58      	cmp	r7, #88	; 0x58
 8003c44:	f000 80a3 	beq.w	8003d8e <_printf_i+0x16e>
 8003c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c50:	e03a      	b.n	8003cc8 <_printf_i+0xa8>
 8003c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c56:	2b15      	cmp	r3, #21
 8003c58:	d8f6      	bhi.n	8003c48 <_printf_i+0x28>
 8003c5a:	a101      	add	r1, pc, #4	; (adr r1, 8003c60 <_printf_i+0x40>)
 8003c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003ccd 	.word	0x08003ccd
 8003c68:	08003c49 	.word	0x08003c49
 8003c6c:	08003c49 	.word	0x08003c49
 8003c70:	08003c49 	.word	0x08003c49
 8003c74:	08003c49 	.word	0x08003c49
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003c49 	.word	0x08003c49
 8003c80:	08003c49 	.word	0x08003c49
 8003c84:	08003c49 	.word	0x08003c49
 8003c88:	08003c49 	.word	0x08003c49
 8003c8c:	08003dd9 	.word	0x08003dd9
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003dbb 	.word	0x08003dbb
 8003c98:	08003c49 	.word	0x08003c49
 8003c9c:	08003c49 	.word	0x08003c49
 8003ca0:	08003dfb 	.word	0x08003dfb
 8003ca4:	08003c49 	.word	0x08003c49
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003c49 	.word	0x08003c49
 8003cb0:	08003c49 	.word	0x08003c49
 8003cb4:	08003dc3 	.word	0x08003dc3
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	602a      	str	r2, [r5, #0]
 8003cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0a3      	b.n	8003e14 <_printf_i+0x1f4>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	6829      	ldr	r1, [r5, #0]
 8003cd0:	0606      	lsls	r6, r0, #24
 8003cd2:	f101 0304 	add.w	r3, r1, #4
 8003cd6:	d50a      	bpl.n	8003cee <_printf_i+0xce>
 8003cd8:	680e      	ldr	r6, [r1, #0]
 8003cda:	602b      	str	r3, [r5, #0]
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	da03      	bge.n	8003ce8 <_printf_i+0xc8>
 8003ce0:	232d      	movs	r3, #45	; 0x2d
 8003ce2:	4276      	negs	r6, r6
 8003ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce8:	485e      	ldr	r0, [pc, #376]	; (8003e64 <_printf_i+0x244>)
 8003cea:	230a      	movs	r3, #10
 8003cec:	e019      	b.n	8003d22 <_printf_i+0x102>
 8003cee:	680e      	ldr	r6, [r1, #0]
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cf6:	bf18      	it	ne
 8003cf8:	b236      	sxthne	r6, r6
 8003cfa:	e7ef      	b.n	8003cdc <_printf_i+0xbc>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	6820      	ldr	r0, [r4, #0]
 8003d00:	1d19      	adds	r1, r3, #4
 8003d02:	6029      	str	r1, [r5, #0]
 8003d04:	0601      	lsls	r1, r0, #24
 8003d06:	d501      	bpl.n	8003d0c <_printf_i+0xec>
 8003d08:	681e      	ldr	r6, [r3, #0]
 8003d0a:	e002      	b.n	8003d12 <_printf_i+0xf2>
 8003d0c:	0646      	lsls	r6, r0, #25
 8003d0e:	d5fb      	bpl.n	8003d08 <_printf_i+0xe8>
 8003d10:	881e      	ldrh	r6, [r3, #0]
 8003d12:	4854      	ldr	r0, [pc, #336]	; (8003e64 <_printf_i+0x244>)
 8003d14:	2f6f      	cmp	r7, #111	; 0x6f
 8003d16:	bf0c      	ite	eq
 8003d18:	2308      	moveq	r3, #8
 8003d1a:	230a      	movne	r3, #10
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d22:	6865      	ldr	r5, [r4, #4]
 8003d24:	60a5      	str	r5, [r4, #8]
 8003d26:	2d00      	cmp	r5, #0
 8003d28:	bfa2      	ittt	ge
 8003d2a:	6821      	ldrge	r1, [r4, #0]
 8003d2c:	f021 0104 	bicge.w	r1, r1, #4
 8003d30:	6021      	strge	r1, [r4, #0]
 8003d32:	b90e      	cbnz	r6, 8003d38 <_printf_i+0x118>
 8003d34:	2d00      	cmp	r5, #0
 8003d36:	d04d      	beq.n	8003dd4 <_printf_i+0x1b4>
 8003d38:	4615      	mov	r5, r2
 8003d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8003d42:	5dc7      	ldrb	r7, [r0, r7]
 8003d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d48:	4637      	mov	r7, r6
 8003d4a:	42bb      	cmp	r3, r7
 8003d4c:	460e      	mov	r6, r1
 8003d4e:	d9f4      	bls.n	8003d3a <_printf_i+0x11a>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d10b      	bne.n	8003d6c <_printf_i+0x14c>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	07de      	lsls	r6, r3, #31
 8003d58:	d508      	bpl.n	8003d6c <_printf_i+0x14c>
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	6861      	ldr	r1, [r4, #4]
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	bfde      	ittt	le
 8003d62:	2330      	movle	r3, #48	; 0x30
 8003d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d6c:	1b52      	subs	r2, r2, r5
 8003d6e:	6122      	str	r2, [r4, #16]
 8003d70:	f8cd a000 	str.w	sl, [sp]
 8003d74:	464b      	mov	r3, r9
 8003d76:	aa03      	add	r2, sp, #12
 8003d78:	4621      	mov	r1, r4
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	f7ff fee2 	bl	8003b44 <_printf_common>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d14c      	bne.n	8003e1e <_printf_i+0x1fe>
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	b004      	add	sp, #16
 8003d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8e:	4835      	ldr	r0, [pc, #212]	; (8003e64 <_printf_i+0x244>)
 8003d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d94:	6829      	ldr	r1, [r5, #0]
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d9c:	6029      	str	r1, [r5, #0]
 8003d9e:	061d      	lsls	r5, r3, #24
 8003da0:	d514      	bpl.n	8003dcc <_printf_i+0x1ac>
 8003da2:	07df      	lsls	r7, r3, #31
 8003da4:	bf44      	itt	mi
 8003da6:	f043 0320 	orrmi.w	r3, r3, #32
 8003daa:	6023      	strmi	r3, [r4, #0]
 8003dac:	b91e      	cbnz	r6, 8003db6 <_printf_i+0x196>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	f023 0320 	bic.w	r3, r3, #32
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	2310      	movs	r3, #16
 8003db8:	e7b0      	b.n	8003d1c <_printf_i+0xfc>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	2378      	movs	r3, #120	; 0x78
 8003dc4:	4828      	ldr	r0, [pc, #160]	; (8003e68 <_printf_i+0x248>)
 8003dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dca:	e7e3      	b.n	8003d94 <_printf_i+0x174>
 8003dcc:	0659      	lsls	r1, r3, #25
 8003dce:	bf48      	it	mi
 8003dd0:	b2b6      	uxthmi	r6, r6
 8003dd2:	e7e6      	b.n	8003da2 <_printf_i+0x182>
 8003dd4:	4615      	mov	r5, r2
 8003dd6:	e7bb      	b.n	8003d50 <_printf_i+0x130>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	6826      	ldr	r6, [r4, #0]
 8003ddc:	6961      	ldr	r1, [r4, #20]
 8003dde:	1d18      	adds	r0, r3, #4
 8003de0:	6028      	str	r0, [r5, #0]
 8003de2:	0635      	lsls	r5, r6, #24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0x1cc>
 8003de8:	6019      	str	r1, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <_printf_i+0x1d2>
 8003dec:	0670      	lsls	r0, r6, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0x1c8>
 8003df0:	8019      	strh	r1, [r3, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	4615      	mov	r5, r2
 8003df8:	e7ba      	b.n	8003d70 <_printf_i+0x150>
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	1d1a      	adds	r2, r3, #4
 8003dfe:	602a      	str	r2, [r5, #0]
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4628      	mov	r0, r5
 8003e08:	f7fc f9e2 	bl	80001d0 <memchr>
 8003e0c:	b108      	cbz	r0, 8003e12 <_printf_i+0x1f2>
 8003e0e:	1b40      	subs	r0, r0, r5
 8003e10:	6060      	str	r0, [r4, #4]
 8003e12:	6863      	ldr	r3, [r4, #4]
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	2300      	movs	r3, #0
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1c:	e7a8      	b.n	8003d70 <_printf_i+0x150>
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	462a      	mov	r2, r5
 8003e22:	4649      	mov	r1, r9
 8003e24:	4640      	mov	r0, r8
 8003e26:	47d0      	blx	sl
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d0ab      	beq.n	8003d84 <_printf_i+0x164>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	079b      	lsls	r3, r3, #30
 8003e30:	d413      	bmi.n	8003e5a <_printf_i+0x23a>
 8003e32:	68e0      	ldr	r0, [r4, #12]
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	4298      	cmp	r0, r3
 8003e38:	bfb8      	it	lt
 8003e3a:	4618      	movlt	r0, r3
 8003e3c:	e7a4      	b.n	8003d88 <_printf_i+0x168>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4632      	mov	r2, r6
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	47d0      	blx	sl
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d09b      	beq.n	8003d84 <_printf_i+0x164>
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	68e3      	ldr	r3, [r4, #12]
 8003e50:	9903      	ldr	r1, [sp, #12]
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	dcf2      	bgt.n	8003e3e <_printf_i+0x21e>
 8003e58:	e7eb      	b.n	8003e32 <_printf_i+0x212>
 8003e5a:	2500      	movs	r5, #0
 8003e5c:	f104 0619 	add.w	r6, r4, #25
 8003e60:	e7f5      	b.n	8003e4e <_printf_i+0x22e>
 8003e62:	bf00      	nop
 8003e64:	08004f09 	.word	0x08004f09
 8003e68:	08004f1a 	.word	0x08004f1a

08003e6c <memcpy>:
 8003e6c:	440a      	add	r2, r1
 8003e6e:	4291      	cmp	r1, r2
 8003e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e74:	d100      	bne.n	8003e78 <memcpy+0xc>
 8003e76:	4770      	bx	lr
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e82:	4291      	cmp	r1, r2
 8003e84:	d1f9      	bne.n	8003e7a <memcpy+0xe>
 8003e86:	bd10      	pop	{r4, pc}

08003e88 <memmove>:
 8003e88:	4288      	cmp	r0, r1
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	eb01 0402 	add.w	r4, r1, r2
 8003e90:	d902      	bls.n	8003e98 <memmove+0x10>
 8003e92:	4284      	cmp	r4, r0
 8003e94:	4623      	mov	r3, r4
 8003e96:	d807      	bhi.n	8003ea8 <memmove+0x20>
 8003e98:	1e43      	subs	r3, r0, #1
 8003e9a:	42a1      	cmp	r1, r4
 8003e9c:	d008      	beq.n	8003eb0 <memmove+0x28>
 8003e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ea6:	e7f8      	b.n	8003e9a <memmove+0x12>
 8003ea8:	4402      	add	r2, r0
 8003eaa:	4601      	mov	r1, r0
 8003eac:	428a      	cmp	r2, r1
 8003eae:	d100      	bne.n	8003eb2 <memmove+0x2a>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eba:	e7f7      	b.n	8003eac <memmove+0x24>

08003ebc <_free_r>:
 8003ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	d044      	beq.n	8003f4c <_free_r+0x90>
 8003ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec6:	9001      	str	r0, [sp, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f1a1 0404 	sub.w	r4, r1, #4
 8003ece:	bfb8      	it	lt
 8003ed0:	18e4      	addlt	r4, r4, r3
 8003ed2:	f000 f913 	bl	80040fc <__malloc_lock>
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <_free_r+0x94>)
 8003ed8:	9801      	ldr	r0, [sp, #4]
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	b933      	cbnz	r3, 8003eec <_free_r+0x30>
 8003ede:	6063      	str	r3, [r4, #4]
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	b003      	add	sp, #12
 8003ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ee8:	f000 b90e 	b.w	8004108 <__malloc_unlock>
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d908      	bls.n	8003f02 <_free_r+0x46>
 8003ef0:	6825      	ldr	r5, [r4, #0]
 8003ef2:	1961      	adds	r1, r4, r5
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	bf01      	itttt	eq
 8003ef8:	6819      	ldreq	r1, [r3, #0]
 8003efa:	685b      	ldreq	r3, [r3, #4]
 8003efc:	1949      	addeq	r1, r1, r5
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	e7ed      	b.n	8003ede <_free_r+0x22>
 8003f02:	461a      	mov	r2, r3
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b10b      	cbz	r3, 8003f0c <_free_r+0x50>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d9fa      	bls.n	8003f02 <_free_r+0x46>
 8003f0c:	6811      	ldr	r1, [r2, #0]
 8003f0e:	1855      	adds	r5, r2, r1
 8003f10:	42a5      	cmp	r5, r4
 8003f12:	d10b      	bne.n	8003f2c <_free_r+0x70>
 8003f14:	6824      	ldr	r4, [r4, #0]
 8003f16:	4421      	add	r1, r4
 8003f18:	1854      	adds	r4, r2, r1
 8003f1a:	42a3      	cmp	r3, r4
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	d1e0      	bne.n	8003ee2 <_free_r+0x26>
 8003f20:	681c      	ldr	r4, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	6053      	str	r3, [r2, #4]
 8003f26:	4421      	add	r1, r4
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	e7da      	b.n	8003ee2 <_free_r+0x26>
 8003f2c:	d902      	bls.n	8003f34 <_free_r+0x78>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	6003      	str	r3, [r0, #0]
 8003f32:	e7d6      	b.n	8003ee2 <_free_r+0x26>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	1961      	adds	r1, r4, r5
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf04      	itt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	bf04      	itt	eq
 8003f44:	1949      	addeq	r1, r1, r5
 8003f46:	6021      	streq	r1, [r4, #0]
 8003f48:	6054      	str	r4, [r2, #4]
 8003f4a:	e7ca      	b.n	8003ee2 <_free_r+0x26>
 8003f4c:	b003      	add	sp, #12
 8003f4e:	bd30      	pop	{r4, r5, pc}
 8003f50:	20000640 	.word	0x20000640

08003f54 <sbrk_aligned>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4e0e      	ldr	r6, [pc, #56]	; (8003f90 <sbrk_aligned+0x3c>)
 8003f58:	460c      	mov	r4, r1
 8003f5a:	6831      	ldr	r1, [r6, #0]
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	b911      	cbnz	r1, 8003f66 <sbrk_aligned+0x12>
 8003f60:	f000 f8bc 	bl	80040dc <_sbrk_r>
 8003f64:	6030      	str	r0, [r6, #0]
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f8b7 	bl	80040dc <_sbrk_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d00a      	beq.n	8003f88 <sbrk_aligned+0x34>
 8003f72:	1cc4      	adds	r4, r0, #3
 8003f74:	f024 0403 	bic.w	r4, r4, #3
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d007      	beq.n	8003f8c <sbrk_aligned+0x38>
 8003f7c:	1a21      	subs	r1, r4, r0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f8ac 	bl	80040dc <_sbrk_r>
 8003f84:	3001      	adds	r0, #1
 8003f86:	d101      	bne.n	8003f8c <sbrk_aligned+0x38>
 8003f88:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	20000644 	.word	0x20000644

08003f94 <_malloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	1ccd      	adds	r5, r1, #3
 8003f9a:	f025 0503 	bic.w	r5, r5, #3
 8003f9e:	3508      	adds	r5, #8
 8003fa0:	2d0c      	cmp	r5, #12
 8003fa2:	bf38      	it	cc
 8003fa4:	250c      	movcc	r5, #12
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	4607      	mov	r7, r0
 8003faa:	db01      	blt.n	8003fb0 <_malloc_r+0x1c>
 8003fac:	42a9      	cmp	r1, r5
 8003fae:	d905      	bls.n	8003fbc <_malloc_r+0x28>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	4e2e      	ldr	r6, [pc, #184]	; (8004078 <_malloc_r+0xe4>)
 8003fbe:	f000 f89d 	bl	80040fc <__malloc_lock>
 8003fc2:	6833      	ldr	r3, [r6, #0]
 8003fc4:	461c      	mov	r4, r3
 8003fc6:	bb34      	cbnz	r4, 8004016 <_malloc_r+0x82>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ffc2 	bl	8003f54 <sbrk_aligned>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	d14d      	bne.n	8004072 <_malloc_r+0xde>
 8003fd6:	6834      	ldr	r4, [r6, #0]
 8003fd8:	4626      	mov	r6, r4
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	d140      	bne.n	8004060 <_malloc_r+0xcc>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	eb04 0803 	add.w	r8, r4, r3
 8003fe8:	f000 f878 	bl	80040dc <_sbrk_r>
 8003fec:	4580      	cmp	r8, r0
 8003fee:	d13a      	bne.n	8004066 <_malloc_r+0xd2>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	3503      	adds	r5, #3
 8003ff4:	1a6d      	subs	r5, r5, r1
 8003ff6:	f025 0503 	bic.w	r5, r5, #3
 8003ffa:	3508      	adds	r5, #8
 8003ffc:	2d0c      	cmp	r5, #12
 8003ffe:	bf38      	it	cc
 8004000:	250c      	movcc	r5, #12
 8004002:	4629      	mov	r1, r5
 8004004:	4638      	mov	r0, r7
 8004006:	f7ff ffa5 	bl	8003f54 <sbrk_aligned>
 800400a:	3001      	adds	r0, #1
 800400c:	d02b      	beq.n	8004066 <_malloc_r+0xd2>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	442b      	add	r3, r5
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	e00e      	b.n	8004034 <_malloc_r+0xa0>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	1b52      	subs	r2, r2, r5
 800401a:	d41e      	bmi.n	800405a <_malloc_r+0xc6>
 800401c:	2a0b      	cmp	r2, #11
 800401e:	d916      	bls.n	800404e <_malloc_r+0xba>
 8004020:	1961      	adds	r1, r4, r5
 8004022:	42a3      	cmp	r3, r4
 8004024:	6025      	str	r5, [r4, #0]
 8004026:	bf18      	it	ne
 8004028:	6059      	strne	r1, [r3, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	bf08      	it	eq
 800402e:	6031      	streq	r1, [r6, #0]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4638      	mov	r0, r7
 8004036:	f104 060b 	add.w	r6, r4, #11
 800403a:	f000 f865 	bl	8004108 <__malloc_unlock>
 800403e:	f026 0607 	bic.w	r6, r6, #7
 8004042:	1d23      	adds	r3, r4, #4
 8004044:	1af2      	subs	r2, r6, r3
 8004046:	d0b6      	beq.n	8003fb6 <_malloc_r+0x22>
 8004048:	1b9b      	subs	r3, r3, r6
 800404a:	50a3      	str	r3, [r4, r2]
 800404c:	e7b3      	b.n	8003fb6 <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	6032      	streq	r2, [r6, #0]
 8004056:	605a      	strne	r2, [r3, #4]
 8004058:	e7ec      	b.n	8004034 <_malloc_r+0xa0>
 800405a:	4623      	mov	r3, r4
 800405c:	6864      	ldr	r4, [r4, #4]
 800405e:	e7b2      	b.n	8003fc6 <_malloc_r+0x32>
 8004060:	4634      	mov	r4, r6
 8004062:	6876      	ldr	r6, [r6, #4]
 8004064:	e7b9      	b.n	8003fda <_malloc_r+0x46>
 8004066:	230c      	movs	r3, #12
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4638      	mov	r0, r7
 800406c:	f000 f84c 	bl	8004108 <__malloc_unlock>
 8004070:	e7a1      	b.n	8003fb6 <_malloc_r+0x22>
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa0>
 8004076:	bf00      	nop
 8004078:	20000640 	.word	0x20000640

0800407c <_realloc_r>:
 800407c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	4680      	mov	r8, r0
 8004082:	4614      	mov	r4, r2
 8004084:	460e      	mov	r6, r1
 8004086:	b921      	cbnz	r1, 8004092 <_realloc_r+0x16>
 8004088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800408c:	4611      	mov	r1, r2
 800408e:	f7ff bf81 	b.w	8003f94 <_malloc_r>
 8004092:	b92a      	cbnz	r2, 80040a0 <_realloc_r+0x24>
 8004094:	f7ff ff12 	bl	8003ebc <_free_r>
 8004098:	4625      	mov	r5, r4
 800409a:	4628      	mov	r0, r5
 800409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a0:	f000 f838 	bl	8004114 <_malloc_usable_size_r>
 80040a4:	4284      	cmp	r4, r0
 80040a6:	4607      	mov	r7, r0
 80040a8:	d802      	bhi.n	80040b0 <_realloc_r+0x34>
 80040aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ae:	d812      	bhi.n	80040d6 <_realloc_r+0x5a>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff ff6e 	bl	8003f94 <_malloc_r>
 80040b8:	4605      	mov	r5, r0
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0ed      	beq.n	800409a <_realloc_r+0x1e>
 80040be:	42bc      	cmp	r4, r7
 80040c0:	4622      	mov	r2, r4
 80040c2:	4631      	mov	r1, r6
 80040c4:	bf28      	it	cs
 80040c6:	463a      	movcs	r2, r7
 80040c8:	f7ff fed0 	bl	8003e6c <memcpy>
 80040cc:	4631      	mov	r1, r6
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7ff fef4 	bl	8003ebc <_free_r>
 80040d4:	e7e1      	b.n	800409a <_realloc_r+0x1e>
 80040d6:	4635      	mov	r5, r6
 80040d8:	e7df      	b.n	800409a <_realloc_r+0x1e>
	...

080040dc <_sbrk_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d06      	ldr	r5, [pc, #24]	; (80040f8 <_sbrk_r+0x1c>)
 80040e0:	2300      	movs	r3, #0
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fc fd6a 	bl	8000bc0 <_sbrk>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_sbrk_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_sbrk_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000648 	.word	0x20000648

080040fc <__malloc_lock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <__malloc_lock+0x8>)
 80040fe:	f000 b811 	b.w	8004124 <__retarget_lock_acquire_recursive>
 8004102:	bf00      	nop
 8004104:	2000064c 	.word	0x2000064c

08004108 <__malloc_unlock>:
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <__malloc_unlock+0x8>)
 800410a:	f000 b80c 	b.w	8004126 <__retarget_lock_release_recursive>
 800410e:	bf00      	nop
 8004110:	2000064c 	.word	0x2000064c

08004114 <_malloc_usable_size_r>:
 8004114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004118:	1f18      	subs	r0, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbc      	itt	lt
 800411e:	580b      	ldrlt	r3, [r1, r0]
 8004120:	18c0      	addlt	r0, r0, r3
 8004122:	4770      	bx	lr

08004124 <__retarget_lock_acquire_recursive>:
 8004124:	4770      	bx	lr

08004126 <__retarget_lock_release_recursive>:
 8004126:	4770      	bx	lr

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr
